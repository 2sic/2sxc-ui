{"hash":"0759ad97dae66e4f94342f4217bffe131310bd4d","fesm2020":{"code":"import * as i0 from '@angular/core';\nimport { Injectable, NgModule, Optional, SkipSelf, Directive, Input, EventEmitter, Output } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpParams, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\n\n/**\r\n *\r\n */\r\nconst appTag = {\r\n    edition: 'edition',\r\n    apiEdition: 'api-edition',\r\n    antiForgeryToken: 'anti-forgery-token',\r\n    moduleId: 'module-id',\r\n    tabId: 'tab-id',\r\n    contentBlockId: 'content-block-id',\r\n    // new in 11.01\r\n    angularPath: 'angular-path',\r\n};\n\n/**\r\n * Special service to inject in the root of the app.\r\n * Allows you to pass configuration on the app-tag in HTML to configure the application.\r\n *\r\n */\r\nclass AppTagService {\r\n    constructor(\r\n    /**\r\n     * The app-tag on the HTML page.\r\n     */\r\n    appElement) {\r\n        this.appElement = appElement;\r\n    }\r\n    /**\r\n     * Get the value of an attribute on the main app-tag\r\n     * @param attributeName\r\n     * @returns\r\n     */\r\n    getAttribute(attributeName) {\r\n        // todo: after upgrading to NG8, probably use el.GetAttribute\r\n        return this.appElement.nativeElement.getAttribute(attributeName);\r\n    }\r\n}\n\nconst runtimeDefaults = {\r\n    addHttpHeaders: true\r\n};\r\nlet constructorCount = 0;\r\n/**\r\n * The Context gives you things from DNN and 2sxc which matches the current runtime context.\r\n * So it auto-detects what's going on in the page and initializes / provides everything.\r\n *\r\n * Note: some properties like moduleId are probably not actually in use any more and will probably be empty\r\n *\r\n * @class Context\r\n * @implements {ContextInfo}\r\n */\r\nclass Context {\r\n    constructor() {\r\n        this.$2sxc = window.$2sxc;\r\n        if (this.$2sxc === undefined) {\r\n            throw new Error('window.$2sxc is null - you probably forgot to include the script before loading angular');\r\n        }\r\n        this.check2sxcVersion();\r\n        constructorCount++;\r\n        if (constructorCount > 1) {\r\n            console.warn('The Context object of dnn-sxc-angular was created more than once. This is unexpected, and will probably lead to problems with the api calls.');\r\n        }\r\n    }\r\n    check2sxcVersion() {\r\n        // Actually the required version is 10.25.2, but 2sxc-ui reports 10.25.1 in 2sxc 10.25.2\r\n        const requiredVersion = [10, 25, 1];\r\n        const version = this.$2sxc.sysinfo.version.split('.').map((v) => parseInt(v));\r\n        // Reduce version to comparision number - 0 means equal, 1 means version > requiredVersion, -1 means version < requiredVersion\r\n        const compareVersions = requiredVersion.reduce((acc, _, i) => acc != 0 ? acc : Math.sign(version[i] - requiredVersion[i]), 0);\r\n        if (compareVersions < 0) {\r\n            throw new Error(`Installed 2sxc version is ${version.join('.')} but ${requiredVersion.join('.')} is required for dnn-sxc-angular.`);\r\n        }\r\n    }\r\n    /**\r\n     * Pre-Configure this context - can be used to configure values in a subclass\r\n     * @param preConfig Pre-Configuration values for this context\r\n     */\r\n    preConfigure(preConfig) {\r\n        this.preConfiguration = preConfig;\r\n        return this;\r\n    }\r\n    /**\r\n     * Configure 2sxc in the context of a HTMLNode.\r\n     * @param htmlNode the HTMLNode\r\n     */\r\n    autoConfigure(htmlNode) {\r\n        this.appTagService = new AppTagService(htmlNode);\r\n        let settings = {\r\n            ...runtimeDefaults,\r\n            ...this.getContextFromAppTag(),\r\n            ...this.preConfiguration\r\n        };\r\n        // Use pre-configured values already in settings if defined; otherwise\r\n        // get from HTMLNode\r\n        settings.sxc = settings.sxc ||\r\n            (settings.moduleId\r\n                ? this.$2sxc(settings.moduleId, settings.contentBlockId)\r\n                : this.$2sxc(htmlNode.nativeElement));\r\n        if (!settings.sxc) {\r\n            throw new Error('couldn\\'t get sxc instance - reason unknown');\r\n        }\r\n        this.sxc = settings.sxc;\r\n        this.addHttpHeaders = settings.addHttpHeaders;\r\n        this.appNameInPath = settings.appNameInPath;\r\n        this.edition = settings.edition;\r\n        this.apiEdition = settings.apiEdition;\r\n        // new in 11.01 - change the base path for angular chunks if needed\r\n        if (settings.angularPath) {\r\n            this.angularPath = settings.angularPath;\r\n            console.log('will set webpcak base to: ' + settings.angularPath);\r\n            __webpack_public_path__ = settings.angularPath;\r\n            console.log('done setting');\r\n        }\r\n    }\r\n    /**\r\n     * Get an attribute value from the app-tag\r\n     * @param name attribute name\r\n     */\r\n    getAppAttribute(name) {\r\n        return this.appTagService.getAttribute(name);\r\n    }\r\n    /**\r\n     * Get context information like module-id from the app-root tag\r\n     * new in Dnn-Sxc-Angular 8\r\n     */\r\n    getContextFromAppTag() {\r\n        let contextFromApp = {\r\n            edition: this.appTagService.getAttribute(appTag.edition),\r\n            apiEdition: this.appTagService.getAttribute(appTag.apiEdition),\r\n            // 2021-02-26 2dm v11.01 added\r\n            angularPath: this.appTagService.getAttribute(appTag.angularPath),\r\n        };\r\n        // Return an object containing only the not-null properties\r\n        return contextFromApp;\r\n    }\r\n}\r\nContext.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: Context, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\r\nContext.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: Context, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: Context, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root',\r\n                }]\r\n        }], ctorParameters: function () { return []; } });\n\n/** @internal */\r\nfunction getHttpParams(params) {\r\n    return typeof (params) === 'string'\r\n        ? new HttpParams({ fromString: params })\r\n        : params instanceof HttpParams\r\n            ? params\r\n            : new HttpParams({ fromObject: params });\r\n}\n\n/** @internal */ const apiRouteName = 'api';\r\n/** @internal */ const contentRouteName = 'content';\r\n/** @internal */ const queryRouteName = 'query';\r\n/** @internal */ const routeRoot = 'app/auto/';\r\n/** @internal */ const routeApi = `${routeRoot}${apiRouteName}`;\r\n/** @internal */ const routeQuery = `${routeRoot}${queryRouteName}`;\r\n/** @internal */ const routeContent = `${routeRoot}${contentRouteName}`;\n\n/**\r\n * Quickly call WebApis on the current App\r\n *\r\n * @export\r\n * @class SxcApiService\r\n */\r\nclass SxcApiService {\r\n    constructor(http, controller) {\r\n        this.http = http;\r\n        this.controller = controller;\r\n    }\r\n    /**\r\n     * Get the request URL of the api\r\n     */\r\n    url(method) {\r\n        return `${routeApi}/${this.controller}/${method}`;\r\n    }\r\n    /**\r\n     * Do a GET request to the specified 2sxc api controller\r\n     */\r\n    get(method, urlParams) {\r\n        const requestParams = getHttpParams(urlParams);\r\n        return this.http.get(this.url(method), { params: requestParams });\r\n    }\r\n    /**\r\n     * Do a POST request to the specified 2sxc api controller\r\n     */\r\n    post(method, urlParams, body) {\r\n        const requestParams = getHttpParams(urlParams);\r\n        return this.http.post(this.url(method), body, { params: requestParams });\r\n    }\r\n    /**\r\n     * Do a PUT request to the specified 2sxc api controller\r\n     */\r\n    put(method, urlParams, body) {\r\n        const requestParams = getHttpParams(urlParams);\r\n        return this.http.put(this.url(method), body, { params: requestParams });\r\n    }\r\n    /**\r\n     * Do a DELETE request to the specified 2sxc api controller\r\n     */\r\n    delete(method, urlParams) {\r\n        const requestParams = getHttpParams(urlParams);\r\n        return this.http.put(this.url(method), { params: requestParams });\r\n    }\r\n}\n\n/**\r\n * A helper to access data from 2sxc\r\n *\r\n * @class SxcDataService\r\n * @template T Type which the system will return\r\n */\r\nclass SxcDataService {\r\n    constructor(http, contentType) {\r\n        this.http = http;\r\n        this.contentType = contentType;\r\n    }\r\n    /**\r\n     * Get all items of this type\r\n     */\r\n    getAll() {\r\n        const url = `${routeContent}/${this.contentType}`;\r\n        return this.http.get(url);\r\n    }\r\n    /**\r\n     * get the specific item with the ID\r\n     */\r\n    getOne(id) {\r\n        const url = `${routeContent}/${this.contentType}/${id}`;\r\n        return this.http.get(url);\r\n    }\r\n    /**\r\n     * Internal implementation of create\r\n     */\r\n    create(item, metadataFor) {\r\n        const url = `${routeContent}/${this.contentType}`;\r\n        item = (metadataFor != null ? { ...item, For: metadataFor } : item);\r\n        return this.http.post(url, item);\r\n    }\r\n    /**\r\n     * Update the specific item with the ID to the item\r\n     */\r\n    update(id, item) {\r\n        const url = `${routeContent}/${this.contentType}/${id}`;\r\n        return this.http.post(url, item);\r\n    }\r\n    /**\r\n     * Delete the specific item with ID/with GUID\r\n     */\r\n    delete(id) {\r\n        const url = `${routeContent}/${this.contentType}/${id}`;\r\n        return this.http.delete(url);\r\n    }\r\n}\n\n/**\r\n * Query object for getting typed data.\r\n * @export\r\n * @class SxcQueryService\r\n * @template T type (usually an interface) of the data coming back\r\n */\r\nclass SxcQueryService {\r\n    constructor(http, name) {\r\n        this.http = http;\r\n        this.name = name;\r\n        this.streamParamKey = 'stream';\r\n    }\r\n    /**\r\n     * Internal implementation of getAll\r\n     */\r\n    getAll(params, data) {\r\n        const url = `${routeQuery}/${this.name}`;\r\n        const streamParams = getHttpParams(params);\r\n        if (data)\r\n            return this.http.post(url, data, { params: streamParams });\r\n        return this.http.get(url, { params: streamParams });\r\n    }\r\n    /**\r\n     * Internal implementation of getStream\r\n     */\r\n    getStream(stream, urlParams, data) {\r\n        const url = `${routeQuery}/${this.name}?${this.streamParamKey}=${stream}`;\r\n        const streamParams = getHttpParams(urlParams);\r\n        if (data)\r\n            return this.http.post(url, data, { params: streamParams }).pipe(map(res => res[stream]));\r\n        return this.http.get(url, { params: streamParams }).pipe(map(res => res[stream]));\r\n    }\r\n    /**\r\n     * Internal implementation of getStreams\r\n     */\r\n    getStreams(streams, urlParams, data) {\r\n        const url = `${routeQuery}/${this.name}?${this.streamParamKey}=${streams.join(',')}`;\r\n        const streamParams = getHttpParams(urlParams);\r\n        if (data)\r\n            return this.http.post(url, data, { params: streamParams });\r\n        return this.http.get(url, { params: streamParams });\r\n    }\r\n}\n\n/**\r\n * 2sxc App Instance Object\r\n * <br>\r\n * gives you access to content and query streams using the content$ and query$ commands\r\n * you can also use the content and query managers, but these are currently not so useful.\r\n *\r\n * @export\r\n * @class SxcApp\r\n */\r\nclass SxcApp {\r\n    constructor(http) {\r\n        this.http = http;\r\n    }\r\n    /**\r\n     * Cet a content manager object for a specific ContentType\r\n     * @param contentType name of the content-type\r\n     * @returns a query object with .getAll(), .getOne(), .create(), .update(), .delete()\r\n     */\r\n    data(contentType) {\r\n        return new SxcDataService(this.http, contentType);\r\n    }\r\n    /**\r\n     * get a query object to then start queries\r\n     * @param name the query name\r\n     * @returns a SxcQueryService object with .getAll(), .getStreams(), .getStream()\r\n     */\r\n    query(name) {\r\n        return new SxcQueryService(this.http, name);\r\n    }\r\n    /**\r\n     * get an api object to then start api-calls\r\n     * @param controller the api controller\r\n     * @returns an SxcApiService object with .url(), .get<T>(), .post<T>(), .put<T>(), .delete<T>() method\r\n     */\r\n    api(controller) {\r\n        return new SxcApiService(this.http, controller);\r\n    }\r\n}\r\nSxcApp.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: SxcApp, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });\r\nSxcApp.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: SxcApp, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: SxcApp, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root',\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }]; } });\n\nclass SxcHttpInterceptor {\r\n    constructor(context) {\r\n        this.context = context;\r\n    }\r\n    intercept(req, next) {\r\n        // skip interceptor for CORS requests\r\n        if (!this.isSameOrigin(req))\r\n            return next.handle(req);\r\n        let url = req.url;\r\n        let ctx = this.context;\r\n        if (ctx.$2sxc) {\r\n            url = ctx.$2sxc.http.apiUrl(req.url);\r\n        }\r\n        // change to use api of an edition, if an edition was specified\r\n        // but only do this on api-routes, the others don't support editions\r\n        if (ctx.apiEdition) {\r\n            url = url.replace(routeApi, routeRoot + ctx.apiEdition + '/' + apiRouteName);\r\n        }\r\n        if (ctx.appNameInPath) {\r\n            url = url.replace(routeRoot, `app/${ctx.appNameInPath}/`);\r\n        }\r\n        let headers = {};\r\n        if (ctx.addHttpHeaders && ctx.sxc) {\r\n            headers = ctx.sxc.webApi.headers();\r\n            headers = this.convertAllPropertiesToString(headers);\r\n        }\r\n        // Clone the request and update the url with 2sxc params.\r\n        const newReq = req.clone({\r\n            url: url,\r\n            setHeaders: headers,\r\n        });\r\n        return next.handle(newReq);\r\n    }\r\n    isSameOrigin(req) {\r\n        let url = req.url.toLowerCase();\r\n        let isRelativeUrl = true;\r\n        if (url.startsWith('https://') || url.startsWith('http://')) {\r\n            isRelativeUrl = false;\r\n        }\r\n        else if (url.startsWith('//')) {\r\n            // protocol relative url\r\n            isRelativeUrl = false;\r\n            url = window.location.protocol + url;\r\n        }\r\n        if (isRelativeUrl)\r\n            return true;\r\n        if (url.startsWith(`${window.location.protocol}//${window.location.host}`))\r\n            return true;\r\n        return false;\r\n    }\r\n    convertAllPropertiesToString(obj) {\r\n        return Object.keys(obj).reduce((a, k) => ({ ...a, [k]: obj[k].toString() }), {});\r\n    }\r\n}\r\nSxcHttpInterceptor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: SxcHttpInterceptor, deps: [{ token: Context }], target: i0.ɵɵFactoryTarget.Injectable });\r\nSxcHttpInterceptor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: SxcHttpInterceptor });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: SxcHttpInterceptor, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: Context }]; } });\n\n/**\r\n * Register the `SxcInterceptor` in a Module.\r\n * Happens automatically when you import the SxcRootModule.\r\n */\r\nconst SxcHttpInterceptorProvider = {\r\n    provide: HTTP_INTERCEPTORS,\r\n    useClass: SxcHttpInterceptor,\r\n    multi: true\r\n};\n\n/**\r\n * The Root module which must be included in the application root.\r\n * It ensures that context etc. is singleton across the entire application\r\n * @export\r\n * @class SxcRootModule\r\n */\r\nclass SxcRootModule {\r\n    // This constructor is a special helper to prevent use in sub-modules\r\n    // https://angular.io/guide/singleton-services#prevent-reimport-of-the-greetingmodule\r\n    constructor(parentModule) {\r\n        if (parentModule)\r\n            throw new Error('SxcRootModule is already loaded. Import it in the root AppModule only');\r\n    }\r\n}\r\nSxcRootModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: SxcRootModule, deps: [{ token: SxcRootModule, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.NgModule });\r\nSxcRootModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: SxcRootModule });\r\nSxcRootModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: SxcRootModule, providers: [\r\n        SxcApp,\r\n        Context,\r\n        SxcHttpInterceptorProvider,\r\n    ], imports: [[\r\n        // Note: it's extremely important that HttpClientModule is _not_ imported\r\n        // anywhere. Otherwise it will break sub-modules\r\n        // because it will create a new HttpClientModule which won't have the interceptor\r\n        // HttpClientModule,\r\n        ]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: SxcRootModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [\r\n                    // Note: it's extremely important that HttpClientModule is _not_ imported\r\n                    // anywhere. Otherwise it will break sub-modules\r\n                    // because it will create a new HttpClientModule which won't have the interceptor\r\n                    // HttpClientModule,\r\n                    ],\r\n                    providers: [\r\n                        SxcApp,\r\n                        Context,\r\n                        SxcHttpInterceptorProvider,\r\n                    ]\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: SxcRootModule, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: SkipSelf\r\n                }] }]; } });\n\nclass SxcToolbarDirective {\r\n    constructor(elementRef, context) {\r\n        this.elementRef = elementRef;\r\n        this.context = context;\r\n        this.config = {};\r\n    }\r\n    ngOnInit() {\r\n        const sxc = this.context.sxc;\r\n        if (!sxc.manage)\r\n            return; // edit not available, probably not logged in\r\n        this.elementRef.nativeElement.innerHTML = sxc.manage.getToolbar(this.config.toolbar, this.config.settings);\r\n    }\r\n}\r\nSxcToolbarDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: SxcToolbarDirective, deps: [{ token: i0.ElementRef }, { token: Context }], target: i0.ɵɵFactoryTarget.Directive });\r\nSxcToolbarDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0\", type: SxcToolbarDirective, selector: \"sxc-toolbar\", inputs: { config: \"config\" }, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: SxcToolbarDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: 'sxc-toolbar'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: Context }]; }, propDecorators: { config: [{\r\n                type: Input\r\n            }] } });\n\n/**\r\n * The toolbar attribute to be used on any HTML tag.\r\n * Will bring the floating edit-toolbar to the UI if the user is logged in\r\n *\r\n * @export\r\n * @class SxcTagToolbarDirective\r\n * @implements {OnInit}\r\n */\r\nclass SxcTagToolbarDirective {\r\n    constructor(element, context) {\r\n        this.element = element;\r\n        this.context = context;\r\n        /**\r\n         * A refresh callback when an action on the toolbar requires data to be refreshed.\r\n         * If not specified, the page will simply reload, if specified, this action will run and page-reload won't happen.\r\n         * New in v.11.12\r\n         */\r\n        this.refresh = new EventEmitter();\r\n    }\r\n    ngOnInit() {\r\n        if (!this.context?.sxc?.isEditMode())\r\n            return;\r\n        const node = this.element.nativeElement;\r\n        this.preventRefreshIfListenerConfigured();\r\n        node.setAttribute(\"sxc-toolbar\", JSON.stringify(this.sxcToolbar || {}));\r\n        return this.context.$2sxc?._manage?._toolbarManager.build(node);\r\n    }\r\n    /**\r\n     * Check if the event emiter has a listener, and if yes, stop automatic page reload\r\n     */\r\n    preventRefreshIfListenerConfigured() {\r\n        //\r\n        if (this.refresh.observers.length > 0) {\r\n            this.element.nativeElement.addEventListener('toolbar-init', (event) => {\r\n                event?.detail?.workflow?.add({\r\n                    command: 'refresh',\r\n                    code: (wfArgs) => {\r\n                        this.refresh.emit(wfArgs); // emit event\r\n                        return false; // prevent default refresh of the 2sxc API\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }\r\n}\r\nSxcTagToolbarDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: SxcTagToolbarDirective, deps: [{ token: i0.ElementRef }, { token: Context }], target: i0.ɵɵFactoryTarget.Directive });\r\nSxcTagToolbarDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0\", type: SxcTagToolbarDirective, selector: \"[sxc-toolbar]\", inputs: { sxcToolbar: [\"sxc-toolbar\", \"sxcToolbar\"] }, outputs: { refresh: \"refresh\" }, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: SxcTagToolbarDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[sxc-toolbar]',\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: Context }]; }, propDecorators: { sxcToolbar: [{\r\n                type: Input,\r\n                args: ['sxc-toolbar']\r\n            }], refresh: [{\r\n                type: Output,\r\n                args: ['refresh']\r\n            }] } });\n\n/**\r\n * This module provides content-editing / management features to Angular.\r\n * It ensures that you can use attributes like sxc-toolbar\r\n * and tags like <sxc-toolbar>\r\n *\r\n * @export\r\n * @class ContentManagerModule\r\n */\r\nclass ContentManagerModule {\r\n}\r\nContentManagerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: ContentManagerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nContentManagerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: ContentManagerModule, declarations: [SxcToolbarDirective,\r\n        SxcTagToolbarDirective], exports: [SxcToolbarDirective,\r\n        SxcTagToolbarDirective] });\r\nContentManagerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: ContentManagerModule, providers: [\r\n        SxcApp,\r\n    ] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: ContentManagerModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [\r\n                        SxcToolbarDirective,\r\n                        SxcTagToolbarDirective,\r\n                    ],\r\n                    providers: [\r\n                        SxcApp,\r\n                    ],\r\n                    exports: [\r\n                        SxcToolbarDirective,\r\n                        SxcTagToolbarDirective,\r\n                    ]\r\n                }]\r\n        }] });\n\n/**\r\n * A root app component which initializes the context-providers once the app is loaded\r\n * This is the earliest moment we can access the ElementRef, because before that\r\n * it's not attached to the DOM, so auto-detect wouldn't work.\r\n * @export\r\n * @class SxcAppComponent\r\n */\r\nclass SxcAppComponent {\r\n    /**\r\n     *\r\n     * @param element the angular ElementRef - required to auto-detect moduleId and more\r\n     * @param context the context service, which handles and shares auto-detection\r\n     * @param enableDefaultSubmit causes enter-hits to submit the asp.net forms (defaults to false)\r\n     */\r\n    constructor(element, context, enableDefaultSubmit) {\r\n        // auto-config to pick up tab-id, module id, etc.\r\n        context.autoConfigure(element);\r\n        // prevent asp.net submit action caused by enter-keys inside our app\r\n        if (!enableDefaultSubmit)\r\n            element.nativeElement.addEventListener('keydown', (e) => {\r\n                if (e.target.tagName.toLowerCase() === 'input' && e.keyCode === 13)\r\n                    e.preventDefault();\r\n            });\r\n    }\r\n}\n\n/*\r\n  Primary exports\r\n  The exports here must be chosen wisely, because they should really only contain the publicly used / created / typed objects.\r\n*/\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { AppTagService, ContentManagerModule, Context, SxcApiService, SxcApp, SxcAppComponent, SxcDataService, SxcHttpInterceptorProvider, SxcQueryService, SxcRootModule, SxcTagToolbarDirective, SxcToolbarDirective };\n","map":{"version":3,"file":"2sic.com-dnn-sxc-angular.mjs","sources":["../../../projects/dnn-sxc-angular/src/lib/names.ts","../../../projects/dnn-sxc-angular/src/lib/context/apptag.service.ts","../../../projects/dnn-sxc-angular/src/lib/context/context.service.ts","../../../projects/dnn-sxc-angular/src/utils/params.ts","../../../projects/dnn-sxc-angular/src/lib/contants.ts","../../../projects/dnn-sxc-angular/src/lib/sxc/api.service.ts","../../../projects/dnn-sxc-angular/src/lib/sxc/data.service.ts","../../../projects/dnn-sxc-angular/src/lib/sxc/query.service.ts","../../../projects/dnn-sxc-angular/src/lib/sxc/sxc-app.ts","../../../projects/dnn-sxc-angular/src/lib/http/sxc.interceptor.ts","../../../projects/dnn-sxc-angular/src/lib/http/sxc.interceptor-provider.ts","../../../projects/dnn-sxc-angular/src/lib/sxc-root.module.ts","../../../projects/dnn-sxc-angular/src/lib/beta/edit.ts","../../../projects/dnn-sxc-angular/src/lib/toolbar/tag-toolbar.ts","../../../projects/dnn-sxc-angular/src/lib/content-manager.module.ts","../../../projects/dnn-sxc-angular/src/lib/sxc-app.component.ts","../../../projects/dnn-sxc-angular/src/lib/index.ts","../../../projects/dnn-sxc-angular/src/2sic.com-dnn-sxc-angular.ts"],"sourcesContent":["/**\r\n *\r\n */\r\nexport const appTag = {\r\n  edition: 'edition',\r\n  apiEdition: 'api-edition',\r\n  antiForgeryToken: 'anti-forgery-token',\r\n  moduleId: 'module-id',\r\n  tabId: 'tab-id',\r\n  contentBlockId: 'content-block-id',\r\n\r\n  // new in 11.01\r\n  angularPath: 'angular-path',\r\n}\r\n","import { ElementRef } from '@angular/core';\r\n\r\n/**\r\n * Special service to inject in the root of the app.\r\n * Allows you to pass configuration on the app-tag in HTML to configure the application.\r\n *\r\n */\r\nexport class AppTagService {\r\n  constructor(\r\n    /**\r\n     * The app-tag on the HTML page.\r\n     */\r\n    private appElement: ElementRef\r\n    ) {\r\n  }\r\n\r\n  /**\r\n   * Get the value of an attribute on the main app-tag\r\n   * @param attributeName\r\n   * @returns\r\n   */\r\n  public getAttribute(attributeName: string): string {\r\n    // todo: after upgrading to NG8, probably use el.GetAttribute\r\n    return this.appElement.nativeElement.getAttribute(attributeName);\r\n  }\r\n}\r\n","import {  SxcGlobal, Sxc } from '@2sic.com/2sxc-typings';\r\nimport { ElementRef, Injectable } from '@angular/core';\r\nimport { appTag } from '../names';\r\nimport { ContextInfo } from './context-info';\r\nimport { AppTagService } from './apptag.service'\r\nimport { ContextInfoPreconfigure } from './context-info-preconfigure'\r\n\r\ndeclare const window: Window;\r\n\r\nconst runtimeDefaults: Partial<ContextInfo> = {\r\n    addHttpHeaders: true\r\n};\r\n\r\nlet constructorCount = 0;\r\n\r\n/** WebPack variable for loading chunks in angular */\r\ndeclare let __webpack_public_path__: any;\r\n\r\n\r\n/**\r\n * The Context gives you things from DNN and 2sxc which matches the current runtime context.\r\n * So it auto-detects what's going on in the page and initializes / provides everything.\r\n *\r\n * Note: some properties like moduleId are probably not actually in use any more and will probably be empty\r\n *\r\n * @class Context\r\n * @implements {ContextInfo}\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class Context implements ContextInfo {\r\n  /** The global $2sxc object */\r\n  $2sxc: SxcGlobal;\r\n\r\n  /** The current module-instance 2sxc-controller */\r\n  sxc: Sxc;\r\n\r\n  /** Setting if it should add HTTP headers. Default is true. You may want to change this if you have an own interceptor.  */\r\n  addHttpHeaders: boolean;\r\n\r\n  /** The current app name - used in API calls */\r\n  appNameInPath: string;\r\n\r\n  /** The current edition to use for the application. */\r\n  edition: string;\r\n\r\n  /** The API edition to use - if you use API-editions (recommended). Will usually be the same as the edition. */\r\n  apiEdition: string;\r\n\r\n  /** The Module ID if it was custom-configured. Will be 'unknown' if not manually set, as then the auto-configure will be used */\r\n  moduleId: number;\r\n\r\n  /** The Content Block ID if it was custom-configured. Will be 'unknown' if not manually set, as then the auto-configure will be used */\r\n  contentBlockId: number;\r\n\r\n  /**\r\n   * The path angular is running in - it's important for lazy-loading to work properly.\r\n   *\r\n   * New in v11.01\r\n   */\r\n  angularPath?: string;\r\n\r\n    private appTagService: AppTagService;\r\n    private preConfiguration: Partial<ContextInfoPreconfigure>;\r\n\r\n    constructor() {\r\n        this.$2sxc = window.$2sxc;\r\n        if (this.$2sxc === undefined) {\r\n            throw new Error('window.$2sxc is null - you probably forgot to include the script before loading angular');\r\n        }\r\n        this.check2sxcVersion();\r\n\r\n        constructorCount++;\r\n        if (constructorCount > 1) {\r\n          console.warn('The Context object of dnn-sxc-angular was created more than once. This is unexpected, and will probably lead to problems with the api calls.')\r\n        }\r\n    }\r\n\r\n    private check2sxcVersion() {\r\n        // Actually the required version is 10.25.2, but 2sxc-ui reports 10.25.1 in 2sxc 10.25.2\r\n        const requiredVersion = [10,25,1];\r\n        const version = this.$2sxc.sysinfo.version.split('.').map((v) => parseInt(v));\r\n\r\n        // Reduce version to comparision number - 0 means equal, 1 means version > requiredVersion, -1 means version < requiredVersion\r\n        const compareVersions = requiredVersion.reduce((acc, _, i) => acc != 0 ? acc : Math.sign(version[i] - requiredVersion[i]), 0);\r\n\r\n        if(compareVersions < 0) {\r\n            throw new Error(`Installed 2sxc version is ${version.join('.')} but ${requiredVersion.join('.')} is required for dnn-sxc-angular.`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Pre-Configure this context - can be used to configure values in a subclass\r\n     * @param preConfig Pre-Configuration values for this context\r\n     */\r\n    preConfigure(preConfig: Partial<ContextInfoPreconfigure>) {\r\n        this.preConfiguration = preConfig;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Configure 2sxc in the context of a HTMLNode.\r\n     * @param htmlNode the HTMLNode\r\n     */\r\n    autoConfigure(htmlNode: ElementRef) {\r\n\r\n        this.appTagService = new AppTagService(htmlNode);\r\n\r\n        let settings = {\r\n            ...runtimeDefaults, // defaults - lowest priority\r\n            ...this.getContextFromAppTag(), // app tags override settings\r\n            ...this.preConfiguration\r\n        } as ContextInfo;\r\n\r\n        // Use pre-configured values already in settings if defined; otherwise\r\n        // get from HTMLNode\r\n        settings.sxc = settings.sxc ||\r\n            (settings.moduleId\r\n            ? this.$2sxc(settings.moduleId, settings.contentBlockId)\r\n            : this.$2sxc(htmlNode.nativeElement));\r\n\r\n        if (!settings.sxc) {\r\n            throw new Error('couldn\\'t get sxc instance - reason unknown');\r\n        }\r\n\r\n        this.sxc = settings.sxc;\r\n        this.addHttpHeaders = settings.addHttpHeaders;\r\n        this.appNameInPath = settings.appNameInPath;\r\n        this.edition = settings.edition;\r\n        this.apiEdition = settings.apiEdition;\r\n\r\n        // new in 11.01 - change the base path for angular chunks if needed\r\n        if (settings.angularPath) {\r\n          this.angularPath = settings.angularPath;\r\n          console.log('will set webpcak base to: ' + settings.angularPath);\r\n          __webpack_public_path__ = settings.angularPath;\r\n          console.log('done setting');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get an attribute value from the app-tag\r\n     * @param name attribute name\r\n     */\r\n    public getAppAttribute(name: string): string {\r\n      return this.appTagService.getAttribute(name);\r\n    }\r\n\r\n    /**\r\n     * Get context information like module-id from the app-root tag\r\n     * new in Dnn-Sxc-Angular 8\r\n     */\r\n    private getContextFromAppTag() : Partial<ContextInfo> {\r\n\r\n        let contextFromApp: Partial<ContextInfo> = {\r\n            edition: this.appTagService.getAttribute(appTag.edition),\r\n            apiEdition: this.appTagService.getAttribute(appTag.apiEdition),\r\n            // 2021-02-26 2dm v11.01 added\r\n            angularPath: this.appTagService.getAttribute(appTag.angularPath),\r\n        }\r\n\r\n        // Return an object containing only the not-null properties\r\n        return contextFromApp;\r\n    }\r\n\r\n}\r\n","import { HttpParams } from '@angular/common/http';\r\n\r\nexport type UrlParams = HttpParams | string | Record<string, string | number | boolean | readonly (string | number | boolean)[]>;\r\n\r\n/** @internal */\r\nexport function getHttpParams(params: UrlParams): HttpParams {\r\n  return typeof (params) === 'string'\r\n    ? new HttpParams({ fromString: params })\r\n    : params instanceof HttpParams\r\n      ? params\r\n      : new HttpParams({ fromObject: params });\r\n}\r\n","\r\n/** @internal */ export const apiRouteName = 'api';\r\n/** @internal */ export const contentRouteName = 'content';\r\n/** @internal */ export const queryRouteName = 'query';\r\n\r\n/** @internal */ export const routeRoot = 'app/auto/';\r\n\r\n/** @internal */ export const routeApi = `${routeRoot}${apiRouteName}`;\r\n/** @internal */ export const routeQuery = `${routeRoot}${queryRouteName}`;\r\n/** @internal */ export const routeContent = `${routeRoot}${contentRouteName}`;\r\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { getHttpParams, UrlParams } from '../../utils/params';\r\nimport { routeApi } from '../contants';\r\n\r\n/**\r\n * Quickly call WebApis on the current App\r\n *\r\n * @export\r\n * @class SxcApiService\r\n */\r\nexport class SxcApiService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private controller: string\r\n  ) {  }\r\n\r\n  /**\r\n   * Get the request URL of the api\r\n   */\r\n  url(method: string): string {\r\n    return `${routeApi}/${this.controller}/${method}`;\r\n  }\r\n\r\n  /**\r\n   * Do a GET request to the specified 2sxc api controller\r\n   */\r\n  get<T>(method: string, urlParams: UrlParams): Observable<T> {\r\n    const requestParams: HttpParams = getHttpParams(urlParams);\r\n    return this.http.get<T>(this.url(method), { params: requestParams });\r\n  }\r\n\r\n  /**\r\n   * Do a POST request to the specified 2sxc api controller\r\n   */\r\n  post<T>(method: string, urlParams: UrlParams, body: T): Observable<T> {\r\n    const requestParams: HttpParams = getHttpParams(urlParams);\r\n    return this.http.post<T>(this.url(method), body, { params: requestParams });\r\n  }\r\n\r\n  /**\r\n   * Do a PUT request to the specified 2sxc api controller\r\n   */\r\n  put<T>(method: string, urlParams: UrlParams, body: T): Observable<T> {\r\n    const requestParams: HttpParams = getHttpParams(urlParams);\r\n    return this.http.put<T>(this.url(method), body, { params: requestParams });\r\n  }\r\n\r\n  /**\r\n   * Do a DELETE request to the specified 2sxc api controller\r\n   */\r\n  delete<T>(method: string, urlParams: UrlParams): Observable<T> {\r\n    const requestParams: HttpParams = getHttpParams(urlParams);\r\n    return this.http.put<T>(this.url(method), { params: requestParams });\r\n  }\r\n}\r\n","import { MetadataFor } from '@2sic.com/2sxc-typings';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { routeContent } from '../contants';\r\n\r\n/**\r\n * A helper to access data from 2sxc\r\n *\r\n * @class SxcDataService\r\n * @template T Type which the system will return\r\n */\r\nexport class SxcDataService<T> {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private contentType: string,\r\n  ) { }\r\n\r\n  /**\r\n   * Get all items of this type\r\n   */\r\n  getAll(): Observable<T[]> {\r\n    const url = `${routeContent}/${this.contentType}`;\r\n    return this.http.get<T[]>(url);\r\n  }\r\n\r\n  /**\r\n   * get the specific item with the ID\r\n   */\r\n  getOne(id: number): Observable<T> {\r\n    const url = `${routeContent}/${this.contentType}/${id}`;\r\n    return this.http.get<T>(url);\r\n  }\r\n\r\n  /**\r\n   * Create new item\r\n   */\r\n  create(item: T): Observable<T>;\r\n\r\n  /**\r\n   * Create new item as metadata for something\r\n   */\r\n  create(item: T | any, metadataFor: MetadataFor): Observable<T>;\r\n\r\n  /**\r\n   * Internal implementation of create\r\n   */\r\n  create(item: T | any, metadataFor?: MetadataFor): Observable<T> {\r\n    const url = `${routeContent}/${this.contentType}`;\r\n    item = (metadataFor != null ? { ...item, For: metadataFor } : item);\r\n    return this.http.post<T>(url, item);\r\n  }\r\n\r\n  /**\r\n   * Update the specific item with the ID to the item\r\n   */\r\n  update(id: number, item: T): Observable<T> {\r\n    const url = `${routeContent}/${this.contentType}/${id}`;\r\n    return this.http.post<T>(url, item);\r\n  }\r\n\r\n  /**\r\n   * Delete the specific item with ID/with GUID\r\n   */\r\n  delete(id: number | string): Observable<T> {\r\n    const url = `${routeContent}/${this.contentType}/${id}`;\r\n    return this.http.delete<T>(url);\r\n  }\r\n}\r\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { getHttpParams, UrlParams } from '../../utils/params';\r\nimport { routeQuery } from '../contants';\r\n\r\n/**\r\n * Query object for getting typed data.\r\n * @export\r\n * @class SxcQueryService\r\n * @template T type (usually an interface) of the data coming back\r\n */\r\nexport class SxcQueryService<T> {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private name: string\r\n  ) { }\r\n\r\n  readonly streamParamKey = 'stream';\r\n\r\n  /**\r\n   * Get an object with all the streams, each containing an array of all the data in that stream\r\n   */\r\n  getAll(): Observable<T>;\r\n\r\n  /**\r\n   * Get an object with all the streams, each containing an array of all the data in that stream\r\n   * with url-parameters as HttpParams or string\r\n   */\r\n  getAll(params: UrlParams): Observable<T>;\r\n\r\n  /**\r\n   * Get an object with all the streams, each containing an array of all the data in that stream\r\n   * with url-parameters as HttpParams or string using post data\r\n   */\r\n  getAll(params: UrlParams, data: T): Observable<T>;\r\n\r\n  /**\r\n   * Internal implementation of getAll\r\n   */\r\n  getAll(params?: UrlParams, data?: T): Observable<T> {\r\n    const url = `${routeQuery}/${this.name}`;\r\n    const streamParams: HttpParams = getHttpParams(params);\r\n\r\n    if (data) return this.http.post<T>(url, data, { params: streamParams });\r\n    return this.http.get<T>(url, { params: streamParams });\r\n  }\r\n\r\n  /**\r\n   * Get an object with the specified stream, containing an array of all the data in that stream\r\n   */\r\n  getStream(stream: string): Observable<T>;\r\n\r\n  /**\r\n   * Get an object with the specified stream, containing an array of all the data in that stream\r\n   * with url-parameters as HttpParams or string\r\n   */\r\n  getStream(stream: string, urlParams: UrlParams): Observable<T>;\r\n\r\n  /**\r\n   * Get an object with the specified stream, containing an array of all the data in that stream\r\n   * with url-parameters as HttpParams or string using post data\r\n   */\r\n  getStream(stream: string, urlParams: UrlParams, data: T): Observable<T>;\r\n\r\n  /**\r\n   * Internal implementation of getStream\r\n   */\r\n  getStream(stream: string, urlParams?: UrlParams, data?: T): Observable<T> {\r\n    const url = `${routeQuery}/${this.name}?${this.streamParamKey}=${stream}`;\r\n    const streamParams: HttpParams = getHttpParams(urlParams);\r\n\r\n    if (data) return this.http.post<T>(url, data, { params: streamParams }).pipe(map(res => res[stream]));\r\n    return this.http.get<T>(url, { params: streamParams }).pipe(map(res => res[stream]));\r\n  }\r\n\r\n  /**\r\n   * Get an object with the specified streams, each containing an array of all the data in that stream\r\n   */\r\n  getStreams(streams: string[]): Observable<T>;\r\n\r\n  /**\r\n   * Get an object with the specified streams, each containing an array of all the data in that stream\r\n   * with url-parameters as HttpParams or string\r\n   */\r\n  getStreams(streams: string[], urlParams: UrlParams): Observable<T>;\r\n\r\n  /**\r\n   * Get an object with the specified streams, each containing an array of all the data in that stream\r\n   * with url-parameters as HttpParams or string using post data\r\n   */\r\n  getStreams(streams: string[], urlParams: UrlParams, data: T): Observable<T>;\r\n\r\n  /**\r\n   * Internal implementation of getStreams\r\n   */\r\n  getStreams(streams: string[], urlParams?: UrlParams, data?: T): Observable<T> {\r\n    const url = `${routeQuery}/${this.name}?${this.streamParamKey}=${streams.join(',')}`;\r\n    const streamParams: HttpParams = getHttpParams(urlParams);\r\n\r\n    if (data) return this.http.post<T>(url, data, { params: streamParams });\r\n    return this.http.get<T>(url, { params: streamParams });\r\n  }\r\n}\r\n","import { SxcApiService } from './api.service';\r\nimport { SxcDataService } from './data.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { SxcQueryService } from './query.service';\r\n\r\n/**\r\n * 2sxc App Instance Object\r\n * <br>\r\n * gives you access to content and query streams using the content$ and query$ commands\r\n * you can also use the content and query managers, but these are currently not so useful.\r\n *\r\n * @export\r\n * @class SxcApp\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SxcApp {\r\n  constructor(\r\n    private http: HttpClient,\r\n  ) { }\r\n\r\n  /**\r\n   * Cet a content manager object for a specific ContentType\r\n   * @param contentType name of the content-type\r\n   * @returns a query object with .getAll(), .getOne(), .create(), .update(), .delete()\r\n   */\r\n  public data<T>(contentType: string): SxcDataService<T> {\r\n    return new SxcDataService<T>(this.http, contentType);\r\n  }\r\n\r\n  /**\r\n   * get a query object to then start queries\r\n   * @param name the query name\r\n   * @returns a SxcQueryService object with .getAll(), .getStreams(), .getStream()\r\n   */\r\n  public query<T>(name: string) {\r\n    return new SxcQueryService<T>(this.http, name);\r\n  }\r\n\r\n  /**\r\n   * get an api object to then start api-calls\r\n   * @param controller the api controller\r\n   * @returns an SxcApiService object with .url(), .get<T>(), .post<T>(), .put<T>(), .delete<T>() method\r\n   */\r\n  public api(controller: string): SxcApiService {\r\n    return new SxcApiService(this.http, controller);\r\n  }\r\n}\r\n","import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { apiRouteName, routeApi, routeRoot } from '../contants';\r\nimport { Context } from '../context/context.service';\r\n\r\n@Injectable()\r\nexport class SxcHttpInterceptor implements HttpInterceptor {\r\n  constructor(private context: Context) { }\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n    // skip interceptor for CORS requests\r\n    if (!this.isSameOrigin(req)) return next.handle(req);\r\n\r\n    let url = req.url;\r\n    let ctx = this.context;\r\n    if (ctx.$2sxc) {\r\n      url = ctx.$2sxc.http.apiUrl(req.url);\r\n    }\r\n\r\n    // change to use api of an edition, if an edition was specified\r\n    // but only do this on api-routes, the others don't support editions\r\n    if (ctx.apiEdition) {\r\n      url = url.replace(routeApi, routeRoot + ctx.apiEdition + '/' + apiRouteName);\r\n    }\r\n\r\n    if (ctx.appNameInPath) {\r\n      url = url.replace(routeRoot, `app/${ctx.appNameInPath}/`);\r\n    }\r\n\r\n    let headers = {};\r\n    if(ctx.addHttpHeaders && ctx.sxc) {\r\n      headers = ctx.sxc.webApi.headers();\r\n      headers = this.convertAllPropertiesToString(headers);\r\n    }\r\n\r\n    // Clone the request and update the url with 2sxc params.\r\n    const newReq = req.clone({\r\n      url: url,\r\n      setHeaders: headers,\r\n    });\r\n\r\n    return next.handle(newReq);\r\n  }\r\n\r\n  private isSameOrigin(req: HttpRequest<any>) {\r\n    let url = req.url.toLowerCase();\r\n    let isRelativeUrl = true;\r\n\r\n    if (url.startsWith('https://') || url.startsWith('http://')) {\r\n      isRelativeUrl = false;\r\n    } else if (url.startsWith('//')) {\r\n      // protocol relative url\r\n      isRelativeUrl = false;\r\n      url = window.location.protocol + url;\r\n    }\r\n\r\n    if (isRelativeUrl) return true;\r\n    if (url.startsWith(`${window.location.protocol}//${window.location.host}`))\r\n      return true;\r\n\r\n    return false;\r\n  }\r\n\r\n\r\n  private convertAllPropertiesToString(obj: any): any {\r\n    return Object.keys(obj).reduce((a,k) => ({...a, [k]:obj[k].toString()}), {})\r\n  }\r\n}\r\n","import { Provider } from '@angular/core';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { SxcHttpInterceptor } from './sxc.interceptor';\r\n\r\n/**\r\n * Register the `SxcInterceptor` in a Module.\r\n * Happens automatically when you import the SxcRootModule.\r\n */\r\nexport const SxcHttpInterceptorProvider: Provider = {\r\n  provide: HTTP_INTERCEPTORS,\r\n  useClass: SxcHttpInterceptor,\r\n  multi: true\r\n};\r\n","import { Context } from './context/context.service';\r\nimport { SxcApp } from './sxc/sxc-app';\r\nimport { SxcHttpInterceptorProvider } from './http/sxc.interceptor-provider';\r\nimport { NgModule, Optional, SkipSelf } from '@angular/core';\r\n\r\n/**\r\n * The Root module which must be included in the application root.\r\n * It ensures that context etc. is singleton across the entire application\r\n * @export\r\n * @class SxcRootModule\r\n */\r\n@NgModule({\r\n  imports: [\r\n    // Note: it's extremely important that HttpClientModule is _not_ imported\r\n    // anywhere. Otherwise it will break sub-modules\r\n    // because it will create a new HttpClientModule which won't have the interceptor\r\n    // HttpClientModule,\r\n  ],\r\n  providers: [\r\n    SxcApp,\r\n    Context,\r\n    SxcHttpInterceptorProvider,\r\n  ]\r\n})\r\n\r\nexport class SxcRootModule {\r\n\r\n  // This constructor is a special helper to prevent use in sub-modules\r\n  // https://angular.io/guide/singleton-services#prevent-reimport-of-the-greetingmodule\r\n  constructor(@Optional() @SkipSelf() parentModule?: SxcRootModule) {\r\n    if (parentModule)\r\n      throw new Error('SxcRootModule is already loaded. Import it in the root AppModule only');\r\n  }\r\n}\r\n","import { Context } from '../context/context.service';\r\nimport { Directive, ElementRef, Input, OnInit } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: 'sxc-toolbar'\r\n})\r\nexport class SxcToolbarDirective implements OnInit {\r\n  @Input() config: any = {};\r\n  constructor(private elementRef: ElementRef, private context: Context) {}\r\n\r\n  ngOnInit() {\r\n    const sxc = this.context.sxc as any;\r\n    if (!sxc.manage) return; // edit not available, probably not logged in\r\n    this.elementRef.nativeElement.innerHTML = sxc.manage.getToolbar(this.config.toolbar, this.config.settings);\r\n  }\r\n\r\n}\r\n","import { Directive, ElementRef, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { Context } from '../context';\r\n\r\n/**\r\n * The toolbar attribute to be used on any HTML tag.\r\n * Will bring the floating edit-toolbar to the UI if the user is logged in\r\n *\r\n * @export\r\n * @class SxcTagToolbarDirective\r\n * @implements {OnInit}\r\n */\r\n@Directive({\r\n  selector: '[sxc-toolbar]',\r\n})\r\nexport class SxcTagToolbarDirective implements OnInit {\r\n\r\n  /**\r\n   * The configuration of this toolbar\r\n   * @type {*} see 2sxc docs, can be a string, string[], or an object\r\n   */\r\n  @Input('sxc-toolbar') sxcToolbar: any; // old name for compatibility\r\n\r\n  /**\r\n   * A refresh callback when an action on the toolbar requires data to be refreshed.\r\n   * If not specified, the page will simply reload, if specified, this action will run and page-reload won't happen.\r\n   * New in v.11.12\r\n   */\r\n  @Output('refresh') refresh = new EventEmitter<any>();\r\n\r\n  constructor(private element: ElementRef, private context: Context) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (!this.context?.sxc?.isEditMode()) return;\r\n    const node = this.element.nativeElement;\r\n    this.preventRefreshIfListenerConfigured();\r\n    node.setAttribute(\"sxc-toolbar\", JSON.stringify(this.sxcToolbar || {}));\r\n    return (this.context.$2sxc as any)?._manage?._toolbarManager.build(node);\r\n  }\r\n\r\n  /**\r\n   * Check if the event emiter has a listener, and if yes, stop automatic page reload\r\n   */\r\n  private preventRefreshIfListenerConfigured() {\r\n    //\r\n    if (this.refresh.observers.length > 0) {\r\n      this.element.nativeElement.addEventListener('toolbar-init', (event) => {\r\n        event?.detail?.workflow?.add({\r\n          command: 'refresh',           // only capture refresh requests\r\n          code: (wfArgs) => {\r\n            this.refresh.emit(wfArgs);  // emit event\r\n            return false;               // prevent default refresh of the 2sxc API\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n","import { SxcApp } from './sxc/sxc-app';\r\nimport { NgModule } from '@angular/core';\r\nimport { SxcToolbarDirective } from './beta/edit';\r\n// important: for funny reasons this must really got to the real path - if you get it from '.' index it will fail building\r\nimport { SxcTagToolbarDirective } from './toolbar/tag-toolbar';\r\n\r\n/**\r\n * This module provides content-editing / management features to Angular.\r\n * It ensures that you can use attributes like sxc-toolbar\r\n * and tags like <sxc-toolbar>\r\n *\r\n * @export\r\n * @class ContentManagerModule\r\n */\r\n@NgModule({\r\n  declarations: [\r\n    SxcToolbarDirective,\r\n    SxcTagToolbarDirective,\r\n  ],\r\n  providers: [\r\n    SxcApp,\r\n  ],\r\n  exports: [\r\n    SxcToolbarDirective,\r\n    SxcTagToolbarDirective,\r\n  ]\r\n})\r\nexport class ContentManagerModule { }\r\n","import { Context } from './context/context.service';\r\nimport { ElementRef } from '@angular/core';\r\n\r\n/**\r\n * A root app component which initializes the context-providers once the app is loaded\r\n * This is the earliest moment we can access the ElementRef, because before that\r\n * it's not attached to the DOM, so auto-detect wouldn't work.\r\n * @export\r\n * @class SxcAppComponent\r\n */\r\nexport class SxcAppComponent {\r\n  /**\r\n   *\r\n   * @param element the angular ElementRef - required to auto-detect moduleId and more\r\n   * @param context the context service, which handles and shares auto-detection\r\n   * @param enableDefaultSubmit causes enter-hits to submit the asp.net forms (defaults to false)\r\n   */\r\n  constructor(\r\n    element: ElementRef,\r\n    context: Context,\r\n    enableDefaultSubmit?: boolean\r\n  ) {\r\n    // auto-config to pick up tab-id, module id, etc.\r\n    context.autoConfigure(element);\r\n    // prevent asp.net submit action caused by enter-keys inside our app\r\n    if (!enableDefaultSubmit)\r\n      element.nativeElement.addEventListener('keydown', (e: any) => {\r\n          if (e.target.tagName.toLowerCase() === 'input' && e.keyCode === 13)\r\n            e.preventDefault();\r\n        }\r\n      );\r\n  }\r\n}\r\n","/*\r\n  Primary exports\r\n  The exports here must be chosen wisely, because they should really only contain the publicly used / created / typed objects.\r\n*/\r\n\r\n// ------------------------- Modules -------------------------\r\n\r\n// The root module which should be in the application root\r\n/** @internal */ export { SxcRootModule } from './sxc-root.module';\r\n\r\n// The data module\r\n// export { SxcDataModule} from './sxc-data.module';\r\n\r\n// The content-manager module with toolbars and content-management functionality\r\n/** @internal */ export { ContentManagerModule } from './content-manager.module';\r\n\r\n\r\n// ------------------------- Modules -------------------------\r\n\r\n/** @internal */ export { SxcAppComponent } from './sxc-app.component';\r\n/** @internal */ export * from './context';\r\n/** @internal */ export * from './sxc';\r\n/** @internal */ export { SxcHttpInterceptorProvider } from './http/sxc.interceptor-provider';\r\n\r\n/** @internal */ export { SxcToolbarDirective } from './beta/edit';\r\n/** @internal */ export { SxcTagToolbarDirective } from './toolbar/tag-toolbar';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.Context"],"mappings":"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"}},"fesm2015":{"code":"import * as i0 from '@angular/core';\nimport { Injectable, NgModule, Optional, SkipSelf, Directive, Input, EventEmitter, Output } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpParams, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\n\n/**\r\n *\r\n */\r\nconst appTag = {\r\n    edition: 'edition',\r\n    apiEdition: 'api-edition',\r\n    antiForgeryToken: 'anti-forgery-token',\r\n    moduleId: 'module-id',\r\n    tabId: 'tab-id',\r\n    contentBlockId: 'content-block-id',\r\n    // new in 11.01\r\n    angularPath: 'angular-path',\r\n};\n\n/**\r\n * Special service to inject in the root of the app.\r\n * Allows you to pass configuration on the app-tag in HTML to configure the application.\r\n *\r\n */\r\nclass AppTagService {\r\n    constructor(\r\n    /**\r\n     * The app-tag on the HTML page.\r\n     */\r\n    appElement) {\r\n        this.appElement = appElement;\r\n    }\r\n    /**\r\n     * Get the value of an attribute on the main app-tag\r\n     * @param attributeName\r\n     * @returns\r\n     */\r\n    getAttribute(attributeName) {\r\n        // todo: after upgrading to NG8, probably use el.GetAttribute\r\n        return this.appElement.nativeElement.getAttribute(attributeName);\r\n    }\r\n}\n\nconst runtimeDefaults = {\r\n    addHttpHeaders: true\r\n};\r\nlet constructorCount = 0;\r\n/**\r\n * The Context gives you things from DNN and 2sxc which matches the current runtime context.\r\n * So it auto-detects what's going on in the page and initializes / provides everything.\r\n *\r\n * Note: some properties like moduleId are probably not actually in use any more and will probably be empty\r\n *\r\n * @class Context\r\n * @implements {ContextInfo}\r\n */\r\nclass Context {\r\n    constructor() {\r\n        this.$2sxc = window.$2sxc;\r\n        if (this.$2sxc === undefined) {\r\n            throw new Error('window.$2sxc is null - you probably forgot to include the script before loading angular');\r\n        }\r\n        this.check2sxcVersion();\r\n        constructorCount++;\r\n        if (constructorCount > 1) {\r\n            console.warn('The Context object of dnn-sxc-angular was created more than once. This is unexpected, and will probably lead to problems with the api calls.');\r\n        }\r\n    }\r\n    check2sxcVersion() {\r\n        // Actually the required version is 10.25.2, but 2sxc-ui reports 10.25.1 in 2sxc 10.25.2\r\n        const requiredVersion = [10, 25, 1];\r\n        const version = this.$2sxc.sysinfo.version.split('.').map((v) => parseInt(v));\r\n        // Reduce version to comparision number - 0 means equal, 1 means version > requiredVersion, -1 means version < requiredVersion\r\n        const compareVersions = requiredVersion.reduce((acc, _, i) => acc != 0 ? acc : Math.sign(version[i] - requiredVersion[i]), 0);\r\n        if (compareVersions < 0) {\r\n            throw new Error(`Installed 2sxc version is ${version.join('.')} but ${requiredVersion.join('.')} is required for dnn-sxc-angular.`);\r\n        }\r\n    }\r\n    /**\r\n     * Pre-Configure this context - can be used to configure values in a subclass\r\n     * @param preConfig Pre-Configuration values for this context\r\n     */\r\n    preConfigure(preConfig) {\r\n        this.preConfiguration = preConfig;\r\n        return this;\r\n    }\r\n    /**\r\n     * Configure 2sxc in the context of a HTMLNode.\r\n     * @param htmlNode the HTMLNode\r\n     */\r\n    autoConfigure(htmlNode) {\r\n        this.appTagService = new AppTagService(htmlNode);\r\n        let settings = Object.assign(Object.assign(Object.assign({}, runtimeDefaults), this.getContextFromAppTag()), this.preConfiguration);\r\n        // Use pre-configured values already in settings if defined; otherwise\r\n        // get from HTMLNode\r\n        settings.sxc = settings.sxc ||\r\n            (settings.moduleId\r\n                ? this.$2sxc(settings.moduleId, settings.contentBlockId)\r\n                : this.$2sxc(htmlNode.nativeElement));\r\n        if (!settings.sxc) {\r\n            throw new Error('couldn\\'t get sxc instance - reason unknown');\r\n        }\r\n        this.sxc = settings.sxc;\r\n        this.addHttpHeaders = settings.addHttpHeaders;\r\n        this.appNameInPath = settings.appNameInPath;\r\n        this.edition = settings.edition;\r\n        this.apiEdition = settings.apiEdition;\r\n        // new in 11.01 - change the base path for angular chunks if needed\r\n        if (settings.angularPath) {\r\n            this.angularPath = settings.angularPath;\r\n            console.log('will set webpcak base to: ' + settings.angularPath);\r\n            __webpack_public_path__ = settings.angularPath;\r\n            console.log('done setting');\r\n        }\r\n    }\r\n    /**\r\n     * Get an attribute value from the app-tag\r\n     * @param name attribute name\r\n     */\r\n    getAppAttribute(name) {\r\n        return this.appTagService.getAttribute(name);\r\n    }\r\n    /**\r\n     * Get context information like module-id from the app-root tag\r\n     * new in Dnn-Sxc-Angular 8\r\n     */\r\n    getContextFromAppTag() {\r\n        let contextFromApp = {\r\n            edition: this.appTagService.getAttribute(appTag.edition),\r\n            apiEdition: this.appTagService.getAttribute(appTag.apiEdition),\r\n            // 2021-02-26 2dm v11.01 added\r\n            angularPath: this.appTagService.getAttribute(appTag.angularPath),\r\n        };\r\n        // Return an object containing only the not-null properties\r\n        return contextFromApp;\r\n    }\r\n}\r\nContext.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: Context, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\r\nContext.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: Context, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: Context, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root',\r\n                }]\r\n        }], ctorParameters: function () { return []; } });\n\n/** @internal */\r\nfunction getHttpParams(params) {\r\n    return typeof (params) === 'string'\r\n        ? new HttpParams({ fromString: params })\r\n        : params instanceof HttpParams\r\n            ? params\r\n            : new HttpParams({ fromObject: params });\r\n}\n\n/** @internal */ const apiRouteName = 'api';\r\n/** @internal */ const contentRouteName = 'content';\r\n/** @internal */ const queryRouteName = 'query';\r\n/** @internal */ const routeRoot = 'app/auto/';\r\n/** @internal */ const routeApi = `${routeRoot}${apiRouteName}`;\r\n/** @internal */ const routeQuery = `${routeRoot}${queryRouteName}`;\r\n/** @internal */ const routeContent = `${routeRoot}${contentRouteName}`;\n\n/**\r\n * Quickly call WebApis on the current App\r\n *\r\n * @export\r\n * @class SxcApiService\r\n */\r\nclass SxcApiService {\r\n    constructor(http, controller) {\r\n        this.http = http;\r\n        this.controller = controller;\r\n    }\r\n    /**\r\n     * Get the request URL of the api\r\n     */\r\n    url(method) {\r\n        return `${routeApi}/${this.controller}/${method}`;\r\n    }\r\n    /**\r\n     * Do a GET request to the specified 2sxc api controller\r\n     */\r\n    get(method, urlParams) {\r\n        const requestParams = getHttpParams(urlParams);\r\n        return this.http.get(this.url(method), { params: requestParams });\r\n    }\r\n    /**\r\n     * Do a POST request to the specified 2sxc api controller\r\n     */\r\n    post(method, urlParams, body) {\r\n        const requestParams = getHttpParams(urlParams);\r\n        return this.http.post(this.url(method), body, { params: requestParams });\r\n    }\r\n    /**\r\n     * Do a PUT request to the specified 2sxc api controller\r\n     */\r\n    put(method, urlParams, body) {\r\n        const requestParams = getHttpParams(urlParams);\r\n        return this.http.put(this.url(method), body, { params: requestParams });\r\n    }\r\n    /**\r\n     * Do a DELETE request to the specified 2sxc api controller\r\n     */\r\n    delete(method, urlParams) {\r\n        const requestParams = getHttpParams(urlParams);\r\n        return this.http.put(this.url(method), { params: requestParams });\r\n    }\r\n}\n\n/**\r\n * A helper to access data from 2sxc\r\n *\r\n * @class SxcDataService\r\n * @template T Type which the system will return\r\n */\r\nclass SxcDataService {\r\n    constructor(http, contentType) {\r\n        this.http = http;\r\n        this.contentType = contentType;\r\n    }\r\n    /**\r\n     * Get all items of this type\r\n     */\r\n    getAll() {\r\n        const url = `${routeContent}/${this.contentType}`;\r\n        return this.http.get(url);\r\n    }\r\n    /**\r\n     * get the specific item with the ID\r\n     */\r\n    getOne(id) {\r\n        const url = `${routeContent}/${this.contentType}/${id}`;\r\n        return this.http.get(url);\r\n    }\r\n    /**\r\n     * Internal implementation of create\r\n     */\r\n    create(item, metadataFor) {\r\n        const url = `${routeContent}/${this.contentType}`;\r\n        item = (metadataFor != null ? Object.assign(Object.assign({}, item), { For: metadataFor }) : item);\r\n        return this.http.post(url, item);\r\n    }\r\n    /**\r\n     * Update the specific item with the ID to the item\r\n     */\r\n    update(id, item) {\r\n        const url = `${routeContent}/${this.contentType}/${id}`;\r\n        return this.http.post(url, item);\r\n    }\r\n    /**\r\n     * Delete the specific item with ID/with GUID\r\n     */\r\n    delete(id) {\r\n        const url = `${routeContent}/${this.contentType}/${id}`;\r\n        return this.http.delete(url);\r\n    }\r\n}\n\n/**\r\n * Query object for getting typed data.\r\n * @export\r\n * @class SxcQueryService\r\n * @template T type (usually an interface) of the data coming back\r\n */\r\nclass SxcQueryService {\r\n    constructor(http, name) {\r\n        this.http = http;\r\n        this.name = name;\r\n        this.streamParamKey = 'stream';\r\n    }\r\n    /**\r\n     * Internal implementation of getAll\r\n     */\r\n    getAll(params, data) {\r\n        const url = `${routeQuery}/${this.name}`;\r\n        const streamParams = getHttpParams(params);\r\n        if (data)\r\n            return this.http.post(url, data, { params: streamParams });\r\n        return this.http.get(url, { params: streamParams });\r\n    }\r\n    /**\r\n     * Internal implementation of getStream\r\n     */\r\n    getStream(stream, urlParams, data) {\r\n        const url = `${routeQuery}/${this.name}?${this.streamParamKey}=${stream}`;\r\n        const streamParams = getHttpParams(urlParams);\r\n        if (data)\r\n            return this.http.post(url, data, { params: streamParams }).pipe(map(res => res[stream]));\r\n        return this.http.get(url, { params: streamParams }).pipe(map(res => res[stream]));\r\n    }\r\n    /**\r\n     * Internal implementation of getStreams\r\n     */\r\n    getStreams(streams, urlParams, data) {\r\n        const url = `${routeQuery}/${this.name}?${this.streamParamKey}=${streams.join(',')}`;\r\n        const streamParams = getHttpParams(urlParams);\r\n        if (data)\r\n            return this.http.post(url, data, { params: streamParams });\r\n        return this.http.get(url, { params: streamParams });\r\n    }\r\n}\n\n/**\r\n * 2sxc App Instance Object\r\n * <br>\r\n * gives you access to content and query streams using the content$ and query$ commands\r\n * you can also use the content and query managers, but these are currently not so useful.\r\n *\r\n * @export\r\n * @class SxcApp\r\n */\r\nclass SxcApp {\r\n    constructor(http) {\r\n        this.http = http;\r\n    }\r\n    /**\r\n     * Cet a content manager object for a specific ContentType\r\n     * @param contentType name of the content-type\r\n     * @returns a query object with .getAll(), .getOne(), .create(), .update(), .delete()\r\n     */\r\n    data(contentType) {\r\n        return new SxcDataService(this.http, contentType);\r\n    }\r\n    /**\r\n     * get a query object to then start queries\r\n     * @param name the query name\r\n     * @returns a SxcQueryService object with .getAll(), .getStreams(), .getStream()\r\n     */\r\n    query(name) {\r\n        return new SxcQueryService(this.http, name);\r\n    }\r\n    /**\r\n     * get an api object to then start api-calls\r\n     * @param controller the api controller\r\n     * @returns an SxcApiService object with .url(), .get<T>(), .post<T>(), .put<T>(), .delete<T>() method\r\n     */\r\n    api(controller) {\r\n        return new SxcApiService(this.http, controller);\r\n    }\r\n}\r\nSxcApp.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: SxcApp, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });\r\nSxcApp.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: SxcApp, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: SxcApp, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root',\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }]; } });\n\nclass SxcHttpInterceptor {\r\n    constructor(context) {\r\n        this.context = context;\r\n    }\r\n    intercept(req, next) {\r\n        // skip interceptor for CORS requests\r\n        if (!this.isSameOrigin(req))\r\n            return next.handle(req);\r\n        let url = req.url;\r\n        let ctx = this.context;\r\n        if (ctx.$2sxc) {\r\n            url = ctx.$2sxc.http.apiUrl(req.url);\r\n        }\r\n        // change to use api of an edition, if an edition was specified\r\n        // but only do this on api-routes, the others don't support editions\r\n        if (ctx.apiEdition) {\r\n            url = url.replace(routeApi, routeRoot + ctx.apiEdition + '/' + apiRouteName);\r\n        }\r\n        if (ctx.appNameInPath) {\r\n            url = url.replace(routeRoot, `app/${ctx.appNameInPath}/`);\r\n        }\r\n        let headers = {};\r\n        if (ctx.addHttpHeaders && ctx.sxc) {\r\n            headers = ctx.sxc.webApi.headers();\r\n            headers = this.convertAllPropertiesToString(headers);\r\n        }\r\n        // Clone the request and update the url with 2sxc params.\r\n        const newReq = req.clone({\r\n            url: url,\r\n            setHeaders: headers,\r\n        });\r\n        return next.handle(newReq);\r\n    }\r\n    isSameOrigin(req) {\r\n        let url = req.url.toLowerCase();\r\n        let isRelativeUrl = true;\r\n        if (url.startsWith('https://') || url.startsWith('http://')) {\r\n            isRelativeUrl = false;\r\n        }\r\n        else if (url.startsWith('//')) {\r\n            // protocol relative url\r\n            isRelativeUrl = false;\r\n            url = window.location.protocol + url;\r\n        }\r\n        if (isRelativeUrl)\r\n            return true;\r\n        if (url.startsWith(`${window.location.protocol}//${window.location.host}`))\r\n            return true;\r\n        return false;\r\n    }\r\n    convertAllPropertiesToString(obj) {\r\n        return Object.keys(obj).reduce((a, k) => (Object.assign(Object.assign({}, a), { [k]: obj[k].toString() })), {});\r\n    }\r\n}\r\nSxcHttpInterceptor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: SxcHttpInterceptor, deps: [{ token: Context }], target: i0.ɵɵFactoryTarget.Injectable });\r\nSxcHttpInterceptor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: SxcHttpInterceptor });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: SxcHttpInterceptor, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: Context }]; } });\n\n/**\r\n * Register the `SxcInterceptor` in a Module.\r\n * Happens automatically when you import the SxcRootModule.\r\n */\r\nconst SxcHttpInterceptorProvider = {\r\n    provide: HTTP_INTERCEPTORS,\r\n    useClass: SxcHttpInterceptor,\r\n    multi: true\r\n};\n\n/**\r\n * The Root module which must be included in the application root.\r\n * It ensures that context etc. is singleton across the entire application\r\n * @export\r\n * @class SxcRootModule\r\n */\r\nclass SxcRootModule {\r\n    // This constructor is a special helper to prevent use in sub-modules\r\n    // https://angular.io/guide/singleton-services#prevent-reimport-of-the-greetingmodule\r\n    constructor(parentModule) {\r\n        if (parentModule)\r\n            throw new Error('SxcRootModule is already loaded. Import it in the root AppModule only');\r\n    }\r\n}\r\nSxcRootModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: SxcRootModule, deps: [{ token: SxcRootModule, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.NgModule });\r\nSxcRootModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: SxcRootModule });\r\nSxcRootModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: SxcRootModule, providers: [\r\n        SxcApp,\r\n        Context,\r\n        SxcHttpInterceptorProvider,\r\n    ], imports: [[\r\n        // Note: it's extremely important that HttpClientModule is _not_ imported\r\n        // anywhere. Otherwise it will break sub-modules\r\n        // because it will create a new HttpClientModule which won't have the interceptor\r\n        // HttpClientModule,\r\n        ]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: SxcRootModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [\r\n                    // Note: it's extremely important that HttpClientModule is _not_ imported\r\n                    // anywhere. Otherwise it will break sub-modules\r\n                    // because it will create a new HttpClientModule which won't have the interceptor\r\n                    // HttpClientModule,\r\n                    ],\r\n                    providers: [\r\n                        SxcApp,\r\n                        Context,\r\n                        SxcHttpInterceptorProvider,\r\n                    ]\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: SxcRootModule, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: SkipSelf\r\n                    }] }];\r\n    } });\n\nclass SxcToolbarDirective {\r\n    constructor(elementRef, context) {\r\n        this.elementRef = elementRef;\r\n        this.context = context;\r\n        this.config = {};\r\n    }\r\n    ngOnInit() {\r\n        const sxc = this.context.sxc;\r\n        if (!sxc.manage)\r\n            return; // edit not available, probably not logged in\r\n        this.elementRef.nativeElement.innerHTML = sxc.manage.getToolbar(this.config.toolbar, this.config.settings);\r\n    }\r\n}\r\nSxcToolbarDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: SxcToolbarDirective, deps: [{ token: i0.ElementRef }, { token: Context }], target: i0.ɵɵFactoryTarget.Directive });\r\nSxcToolbarDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0\", type: SxcToolbarDirective, selector: \"sxc-toolbar\", inputs: { config: \"config\" }, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: SxcToolbarDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: 'sxc-toolbar'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: Context }]; }, propDecorators: { config: [{\r\n                type: Input\r\n            }] } });\n\n/**\r\n * The toolbar attribute to be used on any HTML tag.\r\n * Will bring the floating edit-toolbar to the UI if the user is logged in\r\n *\r\n * @export\r\n * @class SxcTagToolbarDirective\r\n * @implements {OnInit}\r\n */\r\nclass SxcTagToolbarDirective {\r\n    constructor(element, context) {\r\n        this.element = element;\r\n        this.context = context;\r\n        /**\r\n         * A refresh callback when an action on the toolbar requires data to be refreshed.\r\n         * If not specified, the page will simply reload, if specified, this action will run and page-reload won't happen.\r\n         * New in v.11.12\r\n         */\r\n        this.refresh = new EventEmitter();\r\n    }\r\n    ngOnInit() {\r\n        var _a, _b, _c, _d;\r\n        if (!((_b = (_a = this.context) === null || _a === void 0 ? void 0 : _a.sxc) === null || _b === void 0 ? void 0 : _b.isEditMode()))\r\n            return;\r\n        const node = this.element.nativeElement;\r\n        this.preventRefreshIfListenerConfigured();\r\n        node.setAttribute(\"sxc-toolbar\", JSON.stringify(this.sxcToolbar || {}));\r\n        return (_d = (_c = this.context.$2sxc) === null || _c === void 0 ? void 0 : _c._manage) === null || _d === void 0 ? void 0 : _d._toolbarManager.build(node);\r\n    }\r\n    /**\r\n     * Check if the event emiter has a listener, and if yes, stop automatic page reload\r\n     */\r\n    preventRefreshIfListenerConfigured() {\r\n        //\r\n        if (this.refresh.observers.length > 0) {\r\n            this.element.nativeElement.addEventListener('toolbar-init', (event) => {\r\n                var _a, _b;\r\n                (_b = (_a = event === null || event === void 0 ? void 0 : event.detail) === null || _a === void 0 ? void 0 : _a.workflow) === null || _b === void 0 ? void 0 : _b.add({\r\n                    command: 'refresh',\r\n                    code: (wfArgs) => {\r\n                        this.refresh.emit(wfArgs); // emit event\r\n                        return false; // prevent default refresh of the 2sxc API\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }\r\n}\r\nSxcTagToolbarDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: SxcTagToolbarDirective, deps: [{ token: i0.ElementRef }, { token: Context }], target: i0.ɵɵFactoryTarget.Directive });\r\nSxcTagToolbarDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0\", type: SxcTagToolbarDirective, selector: \"[sxc-toolbar]\", inputs: { sxcToolbar: [\"sxc-toolbar\", \"sxcToolbar\"] }, outputs: { refresh: \"refresh\" }, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: SxcTagToolbarDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[sxc-toolbar]',\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: Context }]; }, propDecorators: { sxcToolbar: [{\r\n                type: Input,\r\n                args: ['sxc-toolbar']\r\n            }], refresh: [{\r\n                type: Output,\r\n                args: ['refresh']\r\n            }] } });\n\n/**\r\n * This module provides content-editing / management features to Angular.\r\n * It ensures that you can use attributes like sxc-toolbar\r\n * and tags like <sxc-toolbar>\r\n *\r\n * @export\r\n * @class ContentManagerModule\r\n */\r\nclass ContentManagerModule {\r\n}\r\nContentManagerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: ContentManagerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nContentManagerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: ContentManagerModule, declarations: [SxcToolbarDirective,\r\n        SxcTagToolbarDirective], exports: [SxcToolbarDirective,\r\n        SxcTagToolbarDirective] });\r\nContentManagerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: ContentManagerModule, providers: [\r\n        SxcApp,\r\n    ] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: ContentManagerModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [\r\n                        SxcToolbarDirective,\r\n                        SxcTagToolbarDirective,\r\n                    ],\r\n                    providers: [\r\n                        SxcApp,\r\n                    ],\r\n                    exports: [\r\n                        SxcToolbarDirective,\r\n                        SxcTagToolbarDirective,\r\n                    ]\r\n                }]\r\n        }] });\n\n/**\r\n * A root app component which initializes the context-providers once the app is loaded\r\n * This is the earliest moment we can access the ElementRef, because before that\r\n * it's not attached to the DOM, so auto-detect wouldn't work.\r\n * @export\r\n * @class SxcAppComponent\r\n */\r\nclass SxcAppComponent {\r\n    /**\r\n     *\r\n     * @param element the angular ElementRef - required to auto-detect moduleId and more\r\n     * @param context the context service, which handles and shares auto-detection\r\n     * @param enableDefaultSubmit causes enter-hits to submit the asp.net forms (defaults to false)\r\n     */\r\n    constructor(element, context, enableDefaultSubmit) {\r\n        // auto-config to pick up tab-id, module id, etc.\r\n        context.autoConfigure(element);\r\n        // prevent asp.net submit action caused by enter-keys inside our app\r\n        if (!enableDefaultSubmit)\r\n            element.nativeElement.addEventListener('keydown', (e) => {\r\n                if (e.target.tagName.toLowerCase() === 'input' && e.keyCode === 13)\r\n                    e.preventDefault();\r\n            });\r\n    }\r\n}\n\n/*\r\n  Primary exports\r\n  The exports here must be chosen wisely, because they should really only contain the publicly used / created / typed objects.\r\n*/\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { AppTagService, ContentManagerModule, Context, SxcApiService, SxcApp, SxcAppComponent, SxcDataService, SxcHttpInterceptorProvider, SxcQueryService, SxcRootModule, SxcTagToolbarDirective, SxcToolbarDirective };\n","map":{"version":3,"file":"2sic.com-dnn-sxc-angular.mjs","sources":["../../../projects/dnn-sxc-angular/src/lib/names.ts","../../../projects/dnn-sxc-angular/src/lib/context/apptag.service.ts","../../../projects/dnn-sxc-angular/src/lib/context/context.service.ts","../../../projects/dnn-sxc-angular/src/utils/params.ts","../../../projects/dnn-sxc-angular/src/lib/contants.ts","../../../projects/dnn-sxc-angular/src/lib/sxc/api.service.ts","../../../projects/dnn-sxc-angular/src/lib/sxc/data.service.ts","../../../projects/dnn-sxc-angular/src/lib/sxc/query.service.ts","../../../projects/dnn-sxc-angular/src/lib/sxc/sxc-app.ts","../../../projects/dnn-sxc-angular/src/lib/http/sxc.interceptor.ts","../../../projects/dnn-sxc-angular/src/lib/http/sxc.interceptor-provider.ts","../../../projects/dnn-sxc-angular/src/lib/sxc-root.module.ts","../../../projects/dnn-sxc-angular/src/lib/beta/edit.ts","../../../projects/dnn-sxc-angular/src/lib/toolbar/tag-toolbar.ts","../../../projects/dnn-sxc-angular/src/lib/content-manager.module.ts","../../../projects/dnn-sxc-angular/src/lib/sxc-app.component.ts","../../../projects/dnn-sxc-angular/src/lib/index.ts","../../../projects/dnn-sxc-angular/src/2sic.com-dnn-sxc-angular.ts"],"sourcesContent":["/**\r\n *\r\n */\r\nexport const appTag = {\r\n  edition: 'edition',\r\n  apiEdition: 'api-edition',\r\n  antiForgeryToken: 'anti-forgery-token',\r\n  moduleId: 'module-id',\r\n  tabId: 'tab-id',\r\n  contentBlockId: 'content-block-id',\r\n\r\n  // new in 11.01\r\n  angularPath: 'angular-path',\r\n}\r\n","import { ElementRef } from '@angular/core';\r\n\r\n/**\r\n * Special service to inject in the root of the app.\r\n * Allows you to pass configuration on the app-tag in HTML to configure the application.\r\n *\r\n */\r\nexport class AppTagService {\r\n  constructor(\r\n    /**\r\n     * The app-tag on the HTML page.\r\n     */\r\n    private appElement: ElementRef\r\n    ) {\r\n  }\r\n\r\n  /**\r\n   * Get the value of an attribute on the main app-tag\r\n   * @param attributeName\r\n   * @returns\r\n   */\r\n  public getAttribute(attributeName: string): string {\r\n    // todo: after upgrading to NG8, probably use el.GetAttribute\r\n    return this.appElement.nativeElement.getAttribute(attributeName);\r\n  }\r\n}\r\n","import {  SxcGlobal, Sxc } from '@2sic.com/2sxc-typings';\r\nimport { ElementRef, Injectable } from '@angular/core';\r\nimport { appTag } from '../names';\r\nimport { ContextInfo } from './context-info';\r\nimport { AppTagService } from './apptag.service'\r\nimport { ContextInfoPreconfigure } from './context-info-preconfigure'\r\n\r\ndeclare const window: Window;\r\n\r\nconst runtimeDefaults: Partial<ContextInfo> = {\r\n    addHttpHeaders: true\r\n};\r\n\r\nlet constructorCount = 0;\r\n\r\n/** WebPack variable for loading chunks in angular */\r\ndeclare let __webpack_public_path__: any;\r\n\r\n\r\n/**\r\n * The Context gives you things from DNN and 2sxc which matches the current runtime context.\r\n * So it auto-detects what's going on in the page and initializes / provides everything.\r\n *\r\n * Note: some properties like moduleId are probably not actually in use any more and will probably be empty\r\n *\r\n * @class Context\r\n * @implements {ContextInfo}\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class Context implements ContextInfo {\r\n  /** The global $2sxc object */\r\n  $2sxc: SxcGlobal;\r\n\r\n  /** The current module-instance 2sxc-controller */\r\n  sxc: Sxc;\r\n\r\n  /** Setting if it should add HTTP headers. Default is true. You may want to change this if you have an own interceptor.  */\r\n  addHttpHeaders: boolean;\r\n\r\n  /** The current app name - used in API calls */\r\n  appNameInPath: string;\r\n\r\n  /** The current edition to use for the application. */\r\n  edition: string;\r\n\r\n  /** The API edition to use - if you use API-editions (recommended). Will usually be the same as the edition. */\r\n  apiEdition: string;\r\n\r\n  /** The Module ID if it was custom-configured. Will be 'unknown' if not manually set, as then the auto-configure will be used */\r\n  moduleId: number;\r\n\r\n  /** The Content Block ID if it was custom-configured. Will be 'unknown' if not manually set, as then the auto-configure will be used */\r\n  contentBlockId: number;\r\n\r\n  /**\r\n   * The path angular is running in - it's important for lazy-loading to work properly.\r\n   *\r\n   * New in v11.01\r\n   */\r\n  angularPath?: string;\r\n\r\n    private appTagService: AppTagService;\r\n    private preConfiguration: Partial<ContextInfoPreconfigure>;\r\n\r\n    constructor() {\r\n        this.$2sxc = window.$2sxc;\r\n        if (this.$2sxc === undefined) {\r\n            throw new Error('window.$2sxc is null - you probably forgot to include the script before loading angular');\r\n        }\r\n        this.check2sxcVersion();\r\n\r\n        constructorCount++;\r\n        if (constructorCount > 1) {\r\n          console.warn('The Context object of dnn-sxc-angular was created more than once. This is unexpected, and will probably lead to problems with the api calls.')\r\n        }\r\n    }\r\n\r\n    private check2sxcVersion() {\r\n        // Actually the required version is 10.25.2, but 2sxc-ui reports 10.25.1 in 2sxc 10.25.2\r\n        const requiredVersion = [10,25,1];\r\n        const version = this.$2sxc.sysinfo.version.split('.').map((v) => parseInt(v));\r\n\r\n        // Reduce version to comparision number - 0 means equal, 1 means version > requiredVersion, -1 means version < requiredVersion\r\n        const compareVersions = requiredVersion.reduce((acc, _, i) => acc != 0 ? acc : Math.sign(version[i] - requiredVersion[i]), 0);\r\n\r\n        if(compareVersions < 0) {\r\n            throw new Error(`Installed 2sxc version is ${version.join('.')} but ${requiredVersion.join('.')} is required for dnn-sxc-angular.`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Pre-Configure this context - can be used to configure values in a subclass\r\n     * @param preConfig Pre-Configuration values for this context\r\n     */\r\n    preConfigure(preConfig: Partial<ContextInfoPreconfigure>) {\r\n        this.preConfiguration = preConfig;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Configure 2sxc in the context of a HTMLNode.\r\n     * @param htmlNode the HTMLNode\r\n     */\r\n    autoConfigure(htmlNode: ElementRef) {\r\n\r\n        this.appTagService = new AppTagService(htmlNode);\r\n\r\n        let settings = {\r\n            ...runtimeDefaults, // defaults - lowest priority\r\n            ...this.getContextFromAppTag(), // app tags override settings\r\n            ...this.preConfiguration\r\n        } as ContextInfo;\r\n\r\n        // Use pre-configured values already in settings if defined; otherwise\r\n        // get from HTMLNode\r\n        settings.sxc = settings.sxc ||\r\n            (settings.moduleId\r\n            ? this.$2sxc(settings.moduleId, settings.contentBlockId)\r\n            : this.$2sxc(htmlNode.nativeElement));\r\n\r\n        if (!settings.sxc) {\r\n            throw new Error('couldn\\'t get sxc instance - reason unknown');\r\n        }\r\n\r\n        this.sxc = settings.sxc;\r\n        this.addHttpHeaders = settings.addHttpHeaders;\r\n        this.appNameInPath = settings.appNameInPath;\r\n        this.edition = settings.edition;\r\n        this.apiEdition = settings.apiEdition;\r\n\r\n        // new in 11.01 - change the base path for angular chunks if needed\r\n        if (settings.angularPath) {\r\n          this.angularPath = settings.angularPath;\r\n          console.log('will set webpcak base to: ' + settings.angularPath);\r\n          __webpack_public_path__ = settings.angularPath;\r\n          console.log('done setting');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get an attribute value from the app-tag\r\n     * @param name attribute name\r\n     */\r\n    public getAppAttribute(name: string): string {\r\n      return this.appTagService.getAttribute(name);\r\n    }\r\n\r\n    /**\r\n     * Get context information like module-id from the app-root tag\r\n     * new in Dnn-Sxc-Angular 8\r\n     */\r\n    private getContextFromAppTag() : Partial<ContextInfo> {\r\n\r\n        let contextFromApp: Partial<ContextInfo> = {\r\n            edition: this.appTagService.getAttribute(appTag.edition),\r\n            apiEdition: this.appTagService.getAttribute(appTag.apiEdition),\r\n            // 2021-02-26 2dm v11.01 added\r\n            angularPath: this.appTagService.getAttribute(appTag.angularPath),\r\n        }\r\n\r\n        // Return an object containing only the not-null properties\r\n        return contextFromApp;\r\n    }\r\n\r\n}\r\n","import { HttpParams } from '@angular/common/http';\r\n\r\nexport type UrlParams = HttpParams | string | Record<string, string | number | boolean | readonly (string | number | boolean)[]>;\r\n\r\n/** @internal */\r\nexport function getHttpParams(params: UrlParams): HttpParams {\r\n  return typeof (params) === 'string'\r\n    ? new HttpParams({ fromString: params })\r\n    : params instanceof HttpParams\r\n      ? params\r\n      : new HttpParams({ fromObject: params });\r\n}\r\n","\r\n/** @internal */ export const apiRouteName = 'api';\r\n/** @internal */ export const contentRouteName = 'content';\r\n/** @internal */ export const queryRouteName = 'query';\r\n\r\n/** @internal */ export const routeRoot = 'app/auto/';\r\n\r\n/** @internal */ export const routeApi = `${routeRoot}${apiRouteName}`;\r\n/** @internal */ export const routeQuery = `${routeRoot}${queryRouteName}`;\r\n/** @internal */ export const routeContent = `${routeRoot}${contentRouteName}`;\r\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { getHttpParams, UrlParams } from '../../utils/params';\r\nimport { routeApi } from '../contants';\r\n\r\n/**\r\n * Quickly call WebApis on the current App\r\n *\r\n * @export\r\n * @class SxcApiService\r\n */\r\nexport class SxcApiService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private controller: string\r\n  ) {  }\r\n\r\n  /**\r\n   * Get the request URL of the api\r\n   */\r\n  url(method: string): string {\r\n    return `${routeApi}/${this.controller}/${method}`;\r\n  }\r\n\r\n  /**\r\n   * Do a GET request to the specified 2sxc api controller\r\n   */\r\n  get<T>(method: string, urlParams: UrlParams): Observable<T> {\r\n    const requestParams: HttpParams = getHttpParams(urlParams);\r\n    return this.http.get<T>(this.url(method), { params: requestParams });\r\n  }\r\n\r\n  /**\r\n   * Do a POST request to the specified 2sxc api controller\r\n   */\r\n  post<T>(method: string, urlParams: UrlParams, body: T): Observable<T> {\r\n    const requestParams: HttpParams = getHttpParams(urlParams);\r\n    return this.http.post<T>(this.url(method), body, { params: requestParams });\r\n  }\r\n\r\n  /**\r\n   * Do a PUT request to the specified 2sxc api controller\r\n   */\r\n  put<T>(method: string, urlParams: UrlParams, body: T): Observable<T> {\r\n    const requestParams: HttpParams = getHttpParams(urlParams);\r\n    return this.http.put<T>(this.url(method), body, { params: requestParams });\r\n  }\r\n\r\n  /**\r\n   * Do a DELETE request to the specified 2sxc api controller\r\n   */\r\n  delete<T>(method: string, urlParams: UrlParams): Observable<T> {\r\n    const requestParams: HttpParams = getHttpParams(urlParams);\r\n    return this.http.put<T>(this.url(method), { params: requestParams });\r\n  }\r\n}\r\n","import { MetadataFor } from '@2sic.com/2sxc-typings';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { routeContent } from '../contants';\r\n\r\n/**\r\n * A helper to access data from 2sxc\r\n *\r\n * @class SxcDataService\r\n * @template T Type which the system will return\r\n */\r\nexport class SxcDataService<T> {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private contentType: string,\r\n  ) { }\r\n\r\n  /**\r\n   * Get all items of this type\r\n   */\r\n  getAll(): Observable<T[]> {\r\n    const url = `${routeContent}/${this.contentType}`;\r\n    return this.http.get<T[]>(url);\r\n  }\r\n\r\n  /**\r\n   * get the specific item with the ID\r\n   */\r\n  getOne(id: number): Observable<T> {\r\n    const url = `${routeContent}/${this.contentType}/${id}`;\r\n    return this.http.get<T>(url);\r\n  }\r\n\r\n  /**\r\n   * Create new item\r\n   */\r\n  create(item: T): Observable<T>;\r\n\r\n  /**\r\n   * Create new item as metadata for something\r\n   */\r\n  create(item: T | any, metadataFor: MetadataFor): Observable<T>;\r\n\r\n  /**\r\n   * Internal implementation of create\r\n   */\r\n  create(item: T | any, metadataFor?: MetadataFor): Observable<T> {\r\n    const url = `${routeContent}/${this.contentType}`;\r\n    item = (metadataFor != null ? { ...item, For: metadataFor } : item);\r\n    return this.http.post<T>(url, item);\r\n  }\r\n\r\n  /**\r\n   * Update the specific item with the ID to the item\r\n   */\r\n  update(id: number, item: T): Observable<T> {\r\n    const url = `${routeContent}/${this.contentType}/${id}`;\r\n    return this.http.post<T>(url, item);\r\n  }\r\n\r\n  /**\r\n   * Delete the specific item with ID/with GUID\r\n   */\r\n  delete(id: number | string): Observable<T> {\r\n    const url = `${routeContent}/${this.contentType}/${id}`;\r\n    return this.http.delete<T>(url);\r\n  }\r\n}\r\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { getHttpParams, UrlParams } from '../../utils/params';\r\nimport { routeQuery } from '../contants';\r\n\r\n/**\r\n * Query object for getting typed data.\r\n * @export\r\n * @class SxcQueryService\r\n * @template T type (usually an interface) of the data coming back\r\n */\r\nexport class SxcQueryService<T> {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private name: string\r\n  ) { }\r\n\r\n  readonly streamParamKey = 'stream';\r\n\r\n  /**\r\n   * Get an object with all the streams, each containing an array of all the data in that stream\r\n   */\r\n  getAll(): Observable<T>;\r\n\r\n  /**\r\n   * Get an object with all the streams, each containing an array of all the data in that stream\r\n   * with url-parameters as HttpParams or string\r\n   */\r\n  getAll(params: UrlParams): Observable<T>;\r\n\r\n  /**\r\n   * Get an object with all the streams, each containing an array of all the data in that stream\r\n   * with url-parameters as HttpParams or string using post data\r\n   */\r\n  getAll(params: UrlParams, data: T): Observable<T>;\r\n\r\n  /**\r\n   * Internal implementation of getAll\r\n   */\r\n  getAll(params?: UrlParams, data?: T): Observable<T> {\r\n    const url = `${routeQuery}/${this.name}`;\r\n    const streamParams: HttpParams = getHttpParams(params);\r\n\r\n    if (data) return this.http.post<T>(url, data, { params: streamParams });\r\n    return this.http.get<T>(url, { params: streamParams });\r\n  }\r\n\r\n  /**\r\n   * Get an object with the specified stream, containing an array of all the data in that stream\r\n   */\r\n  getStream(stream: string): Observable<T>;\r\n\r\n  /**\r\n   * Get an object with the specified stream, containing an array of all the data in that stream\r\n   * with url-parameters as HttpParams or string\r\n   */\r\n  getStream(stream: string, urlParams: UrlParams): Observable<T>;\r\n\r\n  /**\r\n   * Get an object with the specified stream, containing an array of all the data in that stream\r\n   * with url-parameters as HttpParams or string using post data\r\n   */\r\n  getStream(stream: string, urlParams: UrlParams, data: T): Observable<T>;\r\n\r\n  /**\r\n   * Internal implementation of getStream\r\n   */\r\n  getStream(stream: string, urlParams?: UrlParams, data?: T): Observable<T> {\r\n    const url = `${routeQuery}/${this.name}?${this.streamParamKey}=${stream}`;\r\n    const streamParams: HttpParams = getHttpParams(urlParams);\r\n\r\n    if (data) return this.http.post<T>(url, data, { params: streamParams }).pipe(map(res => res[stream]));\r\n    return this.http.get<T>(url, { params: streamParams }).pipe(map(res => res[stream]));\r\n  }\r\n\r\n  /**\r\n   * Get an object with the specified streams, each containing an array of all the data in that stream\r\n   */\r\n  getStreams(streams: string[]): Observable<T>;\r\n\r\n  /**\r\n   * Get an object with the specified streams, each containing an array of all the data in that stream\r\n   * with url-parameters as HttpParams or string\r\n   */\r\n  getStreams(streams: string[], urlParams: UrlParams): Observable<T>;\r\n\r\n  /**\r\n   * Get an object with the specified streams, each containing an array of all the data in that stream\r\n   * with url-parameters as HttpParams or string using post data\r\n   */\r\n  getStreams(streams: string[], urlParams: UrlParams, data: T): Observable<T>;\r\n\r\n  /**\r\n   * Internal implementation of getStreams\r\n   */\r\n  getStreams(streams: string[], urlParams?: UrlParams, data?: T): Observable<T> {\r\n    const url = `${routeQuery}/${this.name}?${this.streamParamKey}=${streams.join(',')}`;\r\n    const streamParams: HttpParams = getHttpParams(urlParams);\r\n\r\n    if (data) return this.http.post<T>(url, data, { params: streamParams });\r\n    return this.http.get<T>(url, { params: streamParams });\r\n  }\r\n}\r\n","import { SxcApiService } from './api.service';\r\nimport { SxcDataService } from './data.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { SxcQueryService } from './query.service';\r\n\r\n/**\r\n * 2sxc App Instance Object\r\n * <br>\r\n * gives you access to content and query streams using the content$ and query$ commands\r\n * you can also use the content and query managers, but these are currently not so useful.\r\n *\r\n * @export\r\n * @class SxcApp\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SxcApp {\r\n  constructor(\r\n    private http: HttpClient,\r\n  ) { }\r\n\r\n  /**\r\n   * Cet a content manager object for a specific ContentType\r\n   * @param contentType name of the content-type\r\n   * @returns a query object with .getAll(), .getOne(), .create(), .update(), .delete()\r\n   */\r\n  public data<T>(contentType: string): SxcDataService<T> {\r\n    return new SxcDataService<T>(this.http, contentType);\r\n  }\r\n\r\n  /**\r\n   * get a query object to then start queries\r\n   * @param name the query name\r\n   * @returns a SxcQueryService object with .getAll(), .getStreams(), .getStream()\r\n   */\r\n  public query<T>(name: string) {\r\n    return new SxcQueryService<T>(this.http, name);\r\n  }\r\n\r\n  /**\r\n   * get an api object to then start api-calls\r\n   * @param controller the api controller\r\n   * @returns an SxcApiService object with .url(), .get<T>(), .post<T>(), .put<T>(), .delete<T>() method\r\n   */\r\n  public api(controller: string): SxcApiService {\r\n    return new SxcApiService(this.http, controller);\r\n  }\r\n}\r\n","import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { apiRouteName, routeApi, routeRoot } from '../contants';\r\nimport { Context } from '../context/context.service';\r\n\r\n@Injectable()\r\nexport class SxcHttpInterceptor implements HttpInterceptor {\r\n  constructor(private context: Context) { }\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n    // skip interceptor for CORS requests\r\n    if (!this.isSameOrigin(req)) return next.handle(req);\r\n\r\n    let url = req.url;\r\n    let ctx = this.context;\r\n    if (ctx.$2sxc) {\r\n      url = ctx.$2sxc.http.apiUrl(req.url);\r\n    }\r\n\r\n    // change to use api of an edition, if an edition was specified\r\n    // but only do this on api-routes, the others don't support editions\r\n    if (ctx.apiEdition) {\r\n      url = url.replace(routeApi, routeRoot + ctx.apiEdition + '/' + apiRouteName);\r\n    }\r\n\r\n    if (ctx.appNameInPath) {\r\n      url = url.replace(routeRoot, `app/${ctx.appNameInPath}/`);\r\n    }\r\n\r\n    let headers = {};\r\n    if(ctx.addHttpHeaders && ctx.sxc) {\r\n      headers = ctx.sxc.webApi.headers();\r\n      headers = this.convertAllPropertiesToString(headers);\r\n    }\r\n\r\n    // Clone the request and update the url with 2sxc params.\r\n    const newReq = req.clone({\r\n      url: url,\r\n      setHeaders: headers,\r\n    });\r\n\r\n    return next.handle(newReq);\r\n  }\r\n\r\n  private isSameOrigin(req: HttpRequest<any>) {\r\n    let url = req.url.toLowerCase();\r\n    let isRelativeUrl = true;\r\n\r\n    if (url.startsWith('https://') || url.startsWith('http://')) {\r\n      isRelativeUrl = false;\r\n    } else if (url.startsWith('//')) {\r\n      // protocol relative url\r\n      isRelativeUrl = false;\r\n      url = window.location.protocol + url;\r\n    }\r\n\r\n    if (isRelativeUrl) return true;\r\n    if (url.startsWith(`${window.location.protocol}//${window.location.host}`))\r\n      return true;\r\n\r\n    return false;\r\n  }\r\n\r\n\r\n  private convertAllPropertiesToString(obj: any): any {\r\n    return Object.keys(obj).reduce((a,k) => ({...a, [k]:obj[k].toString()}), {})\r\n  }\r\n}\r\n","import { Provider } from '@angular/core';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { SxcHttpInterceptor } from './sxc.interceptor';\r\n\r\n/**\r\n * Register the `SxcInterceptor` in a Module.\r\n * Happens automatically when you import the SxcRootModule.\r\n */\r\nexport const SxcHttpInterceptorProvider: Provider = {\r\n  provide: HTTP_INTERCEPTORS,\r\n  useClass: SxcHttpInterceptor,\r\n  multi: true\r\n};\r\n","import { Context } from './context/context.service';\r\nimport { SxcApp } from './sxc/sxc-app';\r\nimport { SxcHttpInterceptorProvider } from './http/sxc.interceptor-provider';\r\nimport { NgModule, Optional, SkipSelf } from '@angular/core';\r\n\r\n/**\r\n * The Root module which must be included in the application root.\r\n * It ensures that context etc. is singleton across the entire application\r\n * @export\r\n * @class SxcRootModule\r\n */\r\n@NgModule({\r\n  imports: [\r\n    // Note: it's extremely important that HttpClientModule is _not_ imported\r\n    // anywhere. Otherwise it will break sub-modules\r\n    // because it will create a new HttpClientModule which won't have the interceptor\r\n    // HttpClientModule,\r\n  ],\r\n  providers: [\r\n    SxcApp,\r\n    Context,\r\n    SxcHttpInterceptorProvider,\r\n  ]\r\n})\r\n\r\nexport class SxcRootModule {\r\n\r\n  // This constructor is a special helper to prevent use in sub-modules\r\n  // https://angular.io/guide/singleton-services#prevent-reimport-of-the-greetingmodule\r\n  constructor(@Optional() @SkipSelf() parentModule?: SxcRootModule) {\r\n    if (parentModule)\r\n      throw new Error('SxcRootModule is already loaded. Import it in the root AppModule only');\r\n  }\r\n}\r\n","import { Context } from '../context/context.service';\r\nimport { Directive, ElementRef, Input, OnInit } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: 'sxc-toolbar'\r\n})\r\nexport class SxcToolbarDirective implements OnInit {\r\n  @Input() config: any = {};\r\n  constructor(private elementRef: ElementRef, private context: Context) {}\r\n\r\n  ngOnInit() {\r\n    const sxc = this.context.sxc as any;\r\n    if (!sxc.manage) return; // edit not available, probably not logged in\r\n    this.elementRef.nativeElement.innerHTML = sxc.manage.getToolbar(this.config.toolbar, this.config.settings);\r\n  }\r\n\r\n}\r\n","import { Directive, ElementRef, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { Context } from '../context';\r\n\r\n/**\r\n * The toolbar attribute to be used on any HTML tag.\r\n * Will bring the floating edit-toolbar to the UI if the user is logged in\r\n *\r\n * @export\r\n * @class SxcTagToolbarDirective\r\n * @implements {OnInit}\r\n */\r\n@Directive({\r\n  selector: '[sxc-toolbar]',\r\n})\r\nexport class SxcTagToolbarDirective implements OnInit {\r\n\r\n  /**\r\n   * The configuration of this toolbar\r\n   * @type {*} see 2sxc docs, can be a string, string[], or an object\r\n   */\r\n  @Input('sxc-toolbar') sxcToolbar: any; // old name for compatibility\r\n\r\n  /**\r\n   * A refresh callback when an action on the toolbar requires data to be refreshed.\r\n   * If not specified, the page will simply reload, if specified, this action will run and page-reload won't happen.\r\n   * New in v.11.12\r\n   */\r\n  @Output('refresh') refresh = new EventEmitter<any>();\r\n\r\n  constructor(private element: ElementRef, private context: Context) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (!this.context?.sxc?.isEditMode()) return;\r\n    const node = this.element.nativeElement;\r\n    this.preventRefreshIfListenerConfigured();\r\n    node.setAttribute(\"sxc-toolbar\", JSON.stringify(this.sxcToolbar || {}));\r\n    return (this.context.$2sxc as any)?._manage?._toolbarManager.build(node);\r\n  }\r\n\r\n  /**\r\n   * Check if the event emiter has a listener, and if yes, stop automatic page reload\r\n   */\r\n  private preventRefreshIfListenerConfigured() {\r\n    //\r\n    if (this.refresh.observers.length > 0) {\r\n      this.element.nativeElement.addEventListener('toolbar-init', (event) => {\r\n        event?.detail?.workflow?.add({\r\n          command: 'refresh',           // only capture refresh requests\r\n          code: (wfArgs) => {\r\n            this.refresh.emit(wfArgs);  // emit event\r\n            return false;               // prevent default refresh of the 2sxc API\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n","import { SxcApp } from './sxc/sxc-app';\r\nimport { NgModule } from '@angular/core';\r\nimport { SxcToolbarDirective } from './beta/edit';\r\n// important: for funny reasons this must really got to the real path - if you get it from '.' index it will fail building\r\nimport { SxcTagToolbarDirective } from './toolbar/tag-toolbar';\r\n\r\n/**\r\n * This module provides content-editing / management features to Angular.\r\n * It ensures that you can use attributes like sxc-toolbar\r\n * and tags like <sxc-toolbar>\r\n *\r\n * @export\r\n * @class ContentManagerModule\r\n */\r\n@NgModule({\r\n  declarations: [\r\n    SxcToolbarDirective,\r\n    SxcTagToolbarDirective,\r\n  ],\r\n  providers: [\r\n    SxcApp,\r\n  ],\r\n  exports: [\r\n    SxcToolbarDirective,\r\n    SxcTagToolbarDirective,\r\n  ]\r\n})\r\nexport class ContentManagerModule { }\r\n","import { Context } from './context/context.service';\r\nimport { ElementRef } from '@angular/core';\r\n\r\n/**\r\n * A root app component which initializes the context-providers once the app is loaded\r\n * This is the earliest moment we can access the ElementRef, because before that\r\n * it's not attached to the DOM, so auto-detect wouldn't work.\r\n * @export\r\n * @class SxcAppComponent\r\n */\r\nexport class SxcAppComponent {\r\n  /**\r\n   *\r\n   * @param element the angular ElementRef - required to auto-detect moduleId and more\r\n   * @param context the context service, which handles and shares auto-detection\r\n   * @param enableDefaultSubmit causes enter-hits to submit the asp.net forms (defaults to false)\r\n   */\r\n  constructor(\r\n    element: ElementRef,\r\n    context: Context,\r\n    enableDefaultSubmit?: boolean\r\n  ) {\r\n    // auto-config to pick up tab-id, module id, etc.\r\n    context.autoConfigure(element);\r\n    // prevent asp.net submit action caused by enter-keys inside our app\r\n    if (!enableDefaultSubmit)\r\n      element.nativeElement.addEventListener('keydown', (e: any) => {\r\n          if (e.target.tagName.toLowerCase() === 'input' && e.keyCode === 13)\r\n            e.preventDefault();\r\n        }\r\n      );\r\n  }\r\n}\r\n","/*\r\n  Primary exports\r\n  The exports here must be chosen wisely, because they should really only contain the publicly used / created / typed objects.\r\n*/\r\n\r\n// ------------------------- Modules -------------------------\r\n\r\n// The root module which should be in the application root\r\n/** @internal */ export { SxcRootModule } from './sxc-root.module';\r\n\r\n// The data module\r\n// export { SxcDataModule} from './sxc-data.module';\r\n\r\n// The content-manager module with toolbars and content-management functionality\r\n/** @internal */ export { ContentManagerModule } from './content-manager.module';\r\n\r\n\r\n// ------------------------- Modules -------------------------\r\n\r\n/** @internal */ export { SxcAppComponent } from './sxc-app.component';\r\n/** @internal */ export * from './context';\r\n/** @internal */ export * from './sxc';\r\n/** @internal */ export { SxcHttpInterceptorProvider } from './http/sxc.interceptor-provider';\r\n\r\n/** @internal */ export { SxcToolbarDirective } from './beta/edit';\r\n/** @internal */ export { SxcTagToolbarDirective } from './toolbar/tag-toolbar';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.Context"],"mappings":"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"}}}
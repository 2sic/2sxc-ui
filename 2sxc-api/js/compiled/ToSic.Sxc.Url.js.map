{"version":3,"file":"ToSic.Sxc.Url.js","sourceRoot":"","sources":["../ToSic.Sxc.Url.ts"],"names":[],"mappings":"AACI;IAAA;IAwCA,CAAC;IAvCG,6BAAG,GAAH,UAAI,IAAY;QAGZ,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAC1D,IAAM,QAAQ,GAAG,IAAI,MAAM,CAAC,QAAQ,GAAG,IAAI,GAAG,WAAW,EAAE,GAAG,CAAC,CAAC;QAChE,IAAI,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC7C,IAAI,SAAiB,CAAC;QAEtB,EAAE,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC;YACnB,IAAM,MAAM,GAAG,IAAI,MAAM,CAAC,MAAM,GAAG,IAAI,GAAG,WAAW,EAAE,GAAG,CAAC,CAAC;YAC5D,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACzC,CAAC;QAGD,EAAE,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC;YAEnB,IAAM,OAAO,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,GAAG,GAAG,IAAI,GAAG,UAAU,EAAE,GAAG,CAAC,CAAC,CAAC;YAIzF,EAAE,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;gBAC9B,SAAS,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;QACzC,CAAC;QAAC,IAAI;YACF,SAAS,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;QAE3B,MAAM,CAAC,SAAS,KAAK,IAAI,IAAI,SAAS,KAAK,SAAS;YAChD,CAAC,CAAC,EAAE;YACJ,CAAC,CAAC,kBAAkB,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;IAC5D,CAAC;IAED,iCAAO,GAAP,UAAQ,IAAY;QAChB,IAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC7B,EAAE,CAAC,CAAC,KAAK,KAAK,EAAE,CAAC,CAAC,CAAC;YACf,IAAM,OAAO,GAAG,yBAAuB,IAAI,yCAAsC,CAAC;YAClF,KAAK,CAAC,OAAO,CAAC,CAAC;YACf,MAAM,OAAO,CAAC;QAClB,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IACL,sBAAC;AAAD,CAAC,AAxCD,IAwCC","sourcesContent":["\r\n    export class UrlParamManager {\r\n        get(name: string) {\r\n            // warning: this method is duplicated in 2 places - keep them in sync.\r\n            // locations are eav and 2sxc4ng\r\n            name = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\r\n            const searchRx = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\", \"i\");\r\n            let results = searchRx.exec(location.search);\r\n            let strResult: string;\r\n\r\n            if (results === null) {\r\n                const hashRx = new RegExp(\"[#&]\" + name + \"=([^&#]*)\", \"i\");\r\n                results = hashRx.exec(location.hash);\r\n            }\r\n\r\n            // if nothing found, try normal URL because DNN places parameters in /key/value notation\r\n            if (results === null) {\r\n                // Otherwise try parts of the URL\r\n                const matches = window.location.pathname.match(new RegExp(\"/\" + name + \"/([^/]+)\", \"i\"));\r\n\r\n                // Check if we found anything, if we do find it, we must reverse the\r\n                // results so we get the \"last\" one in case there are multiple hits\r\n                if (matches && matches.length > 1)\r\n                    strResult = matches.reverse()[0];\r\n            } else\r\n                strResult = results[1];\r\n\r\n            return strResult === null || strResult === undefined\r\n                ? \"\"\r\n                : decodeURIComponent(strResult.replace(/\\+/g, \" \"));\r\n        }\r\n\r\n        require(name: string) {\r\n            const found = this.get(name);\r\n            if (found === \"\") {\r\n                const message = `Required parameter (${name}) missing from url - cannot continue`;\r\n                alert(message);\r\n                throw message;\r\n            }\r\n            return found;\r\n        }\r\n    }\r\n"]}